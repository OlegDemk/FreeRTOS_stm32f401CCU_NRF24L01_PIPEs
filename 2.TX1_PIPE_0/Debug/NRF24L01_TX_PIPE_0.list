
NRF24L01_TX_PIPE_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db4  08005db4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dbc  08005dbc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  2000007c  08005e40  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b8c  08005e40  00024b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d0f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e9  00000000  00000000  00037dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000383a  00000000  00000000  0003d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a21  00000000  00000000  00040fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c1b  00000000  00000000  00055a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d4  00000000  00000000  000ec678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005cb8 	.word	0x08005cb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08005cb8 	.word	0x08005cb8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fd6c 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f824 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8c2 	bl	8000678 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004f4:	f000 f88a 	bl	800060c <MX_SPI2_Init>
 // testReadWriteSetingd();			// For debug

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f002 fbe8 	bl	8002ccc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semFromNrfIRQ_Pin */
  semFromNrfIRQ_PinHandle = osSemaphoreNew(1, 1, &semFromNrfIRQ_Pin_attributes);
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <main+0x40>)
 80004fe:	2101      	movs	r1, #1
 8000500:	2001      	movs	r0, #1
 8000502:	f002 fcda 	bl	8002eba <osSemaphoreNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <main+0x44>)
 800050a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <main+0x48>)
 800050e:	2100      	movs	r1, #0
 8000510:	4807      	ldr	r0, [pc, #28]	; (8000530 <main+0x4c>)
 8000512:	f002 fc25 	bl	8002d60 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <main+0x50>)
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f002 fbfa 	bl	8002d14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x3c>
 8000522:	bf00      	nop
 8000524:	08005d2c 	.word	0x08005d2c
 8000528:	2000011c 	.word	0x2000011c
 800052c:	08005d08 	.word	0x08005d08
 8000530:	080007ad 	.word	0x080007ad
 8000534:	20000118 	.word	0x20000118

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 faec 	bl	8005b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <SystemClock_Config+0xd0>)
 8000586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005ac:	2319      	movs	r3, #25
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 f817 	bl	80015f4 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005cc:	f000 f90e 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2102      	movs	r1, #2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fa79 	bl	8001ae4 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f8:	f000 f8f8 	bl	80007ec <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_SPI2_Init+0x64>)
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <MX_SPI2_Init+0x68>)
 8000614:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI2_Init+0x64>)
 8000618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800061c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI2_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_SPI2_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI2_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI2_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI2_Init+0x64>)
 8000638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI2_Init+0x64>)
 8000640:	2208      	movs	r2, #8
 8000642:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_SPI2_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI2_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_SPI2_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI2_Init+0x64>)
 8000658:	220a      	movs	r2, #10
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_SPI2_Init+0x64>)
 800065e:	f001 fc3f 	bl	8001ee0 <HAL_SPI_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000668:	f000 f8c0 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000c0 	.word	0x200000c0
 8000674:	40003800 	.word	0x40003800

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b42      	ldr	r3, [pc, #264]	; (800079c <MX_GPIO_Init+0x124>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a41      	ldr	r2, [pc, #260]	; (800079c <MX_GPIO_Init+0x124>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b3f      	ldr	r3, [pc, #252]	; (800079c <MX_GPIO_Init+0x124>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b3b      	ldr	r3, [pc, #236]	; (800079c <MX_GPIO_Init+0x124>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a3a      	ldr	r2, [pc, #232]	; (800079c <MX_GPIO_Init+0x124>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b38      	ldr	r3, [pc, #224]	; (800079c <MX_GPIO_Init+0x124>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b34      	ldr	r3, [pc, #208]	; (800079c <MX_GPIO_Init+0x124>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a33      	ldr	r2, [pc, #204]	; (800079c <MX_GPIO_Init+0x124>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <MX_GPIO_Init+0x124>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_GPIO_Init+0x124>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <MX_GPIO_Init+0x124>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_GPIO_Init+0x124>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000704:	4826      	ldr	r0, [pc, #152]	; (80007a0 <MX_GPIO_Init+0x128>)
 8000706:	f000 ff1d 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2118      	movs	r1, #24
 800070e:	4825      	ldr	r0, [pc, #148]	; (80007a4 <MX_GPIO_Init+0x12c>)
 8000710:	f000 ff18 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	481c      	ldr	r0, [pc, #112]	; (80007a0 <MX_GPIO_Init+0x128>)
 800072e:	f000 fd6d 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 8000732:	2304      	movs	r3, #4
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000736:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4817      	ldr	r0, [pc, #92]	; (80007a4 <MX_GPIO_Init+0x12c>)
 8000748:	f000 fd60 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 800074c:	2318      	movs	r3, #24
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4810      	ldr	r0, [pc, #64]	; (80007a4 <MX_GPIO_Init+0x12c>)
 8000764:	f000 fd52 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <MX_GPIO_Init+0x130>)
 800077e:	f000 fd45 	bl	800120c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2105      	movs	r1, #5
 8000786:	2008      	movs	r0, #8
 8000788:	f000 fd16 	bl	80011b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800078c:	2008      	movs	r0, #8
 800078e:	f000 fd2f 	bl	80011f0 <HAL_NVIC_EnableIRQ>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020400 	.word	0x40020400

080007ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	NRF24_init();
 80007b4:	f000 f960 	bl	8000a78 <NRF24_init>


  for(;;)
  {
	  // testReadWriteSetingd();
	  NRF24L01_Transmit();
 80007b8:	f000 fb96 	bl	8000ee8 <NRF24L01_Transmit>
	  osDelay(1000);
 80007bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c0:	f002 fb60 	bl	8002e84 <osDelay>
	  NRF24L01_Transmit();
 80007c4:	e7f8      	b.n	80007b8 <StartDefaultTask+0xc>
	...

080007c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d101      	bne.n	80007de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007da:	f000 fc15 	bl	8001008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40014400 	.word	0x40014400

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_MspInit+0x54>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <HAL_MspInit+0x54>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x54>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_MspInit+0x54>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_MspInit+0x54>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_MspInit+0x54>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	210f      	movs	r1, #15
 800083a:	f06f 0001 	mvn.w	r0, #1
 800083e:	f000 fcbb 	bl	80011b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <HAL_SPI_MspInit+0x84>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d12c      	bne.n	80008cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_SPI_MspInit+0x88>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_SPI_MspInit+0x88>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_SPI_MspInit+0x88>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_SPI_MspInit+0x88>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <HAL_SPI_MspInit+0x88>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_SPI_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80008aa:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008bc:	2305      	movs	r3, #5
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_SPI_MspInit+0x8c>)
 80008c8:	f000 fca0 	bl	800120c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40003800 	.word	0x40003800
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020400 	.word	0x40020400

080008e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <HAL_InitTick+0xd0>)
 80008f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f8:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <HAL_InitTick+0xd0>)
 80008fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fe:	6453      	str	r3, [r2, #68]	; 0x44
 8000900:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <HAL_InitTick+0xd0>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090c:	f107 020c 	add.w	r2, r7, #12
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fab0 	bl	8001e7c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800091c:	f001 fa9a 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8000920:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000924:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <HAL_InitTick+0xd4>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	0c9b      	lsrs	r3, r3, #18
 800092c:	3b01      	subs	r3, #1
 800092e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000930:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <HAL_InitTick+0xd8>)
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <HAL_InitTick+0xdc>)
 8000934:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_InitTick+0xd8>)
 8000938:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <HAL_InitTick+0xd8>)
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_InitTick+0xd8>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <HAL_InitTick+0xd8>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_InitTick+0xd8>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000956:	4818      	ldr	r0, [pc, #96]	; (80009b8 <HAL_InitTick+0xd8>)
 8000958:	f001 fef4 	bl	8002744 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000966:	2b00      	cmp	r3, #0
 8000968:	d11b      	bne.n	80009a2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800096a:	4813      	ldr	r0, [pc, #76]	; (80009b8 <HAL_InitTick+0xd8>)
 800096c:	f001 ff44 	bl	80027f8 <HAL_TIM_Base_Start_IT>
 8000970:	4603      	mov	r3, r0
 8000972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800097a:	2b00      	cmp	r3, #0
 800097c:	d111      	bne.n	80009a2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800097e:	2019      	movs	r0, #25
 8000980:	f000 fc36 	bl	80011f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b0f      	cmp	r3, #15
 8000988:	d808      	bhi.n	800099c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800098a:	2200      	movs	r2, #0
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	2019      	movs	r0, #25
 8000990:	f000 fc12 	bl	80011b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_InitTick+0xe0>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
 800099a:	e002      	b.n	80009a2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3730      	adds	r7, #48	; 0x30
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	20000120 	.word	0x20000120
 80009bc:	40014400 	.word	0x40014400
 80009c0:	2000000c 	.word	0x2000000c

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 80009f4:	2004      	movs	r0, #4
 80009f6:	f000 fdd9 	bl	80015ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a06:	f001 ff59 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000120 	.word	0x20000120

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <DelayMicro>:



// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <DelayMicro+0x38>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	099b      	lsrs	r3, r3, #6
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <DelayMicro+0x3c>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	0a9b      	lsrs	r3, r3, #10
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--) ;
 8000a56:	bf00      	nop
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	1e5a      	subs	r2, r3, #1
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1fa      	bne.n	8000a58 <DelayMicro+0x20>
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	20000000 	.word	0x20000000
 8000a74:	02659117 	.word	0x02659117

08000a78 <NRF24_init>:
// -------------------------------------------------------------------------------------
void NRF24_init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	 CE_RESET;
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2108      	movs	r1, #8
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <NRF24_init+0xa0>)
 8000a82:	f000 fd5f 	bl	8001544 <HAL_GPIO_WritePin>
	 // DelayMicro(5000);
	 osDelay(5);
 8000a86:	2005      	movs	r0, #5
 8000a88:	f002 f9fc 	bl	8002e84 <osDelay>
	 // HAL_Delay(5);
	 NRF24_WriteReg(CONFIG, 0x0A); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8000a8c:	210a      	movs	r1, #10
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f87c 	bl	8000b8c <NRF24_WriteReg>
	 // DelayMicro(5000);
	 // HAL_Delay(5);
	 osDelay(5);
 8000a94:	2005      	movs	r0, #5
 8000a96:	f002 f9f5 	bl	8002e84 <osDelay>

	 NRF24_WriteReg(EN_AA, 0x01); 			// Enable pipe 0
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 f875 	bl	8000b8c <NRF24_WriteReg>
	 NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe 0				// включає канал
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f000 f871 	bl	8000b8c <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f86d 	bl	8000b8c <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_RETR, 0x5F);		// 1500us, 15 retrans
 8000ab2:	215f      	movs	r1, #95	; 0x5f
 8000ab4:	2004      	movs	r0, #4
 8000ab6:	f000 f869 	bl	8000b8c <NRF24_WriteReg>

	 NRF24_ToggleFeatures();
 8000aba:	f000 f895 	bl	8000be8 <NRF24_ToggleFeatures>

	 NRF24_WriteReg(FEATURE, 0);
 8000abe:	2100      	movs	r1, #0
 8000ac0:	201d      	movs	r0, #29
 8000ac2:	f000 f863 	bl	8000b8c <NRF24_WriteReg>
	 NRF24_WriteReg(DYNPD, 0);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	201c      	movs	r0, #28
 8000aca:	f000 f85f 	bl	8000b8c <NRF24_WriteReg>
	 NRF24_WriteReg(STATUS, 0x70);			// Reset flags for IRQ
 8000ace:	2170      	movs	r1, #112	; 0x70
 8000ad0:	2007      	movs	r0, #7
 8000ad2:	f000 f85b 	bl	8000b8c <NRF24_WriteReg>
	 NRF24_WriteReg(RF_CH, 76); 			// 2476 MHz
 8000ad6:	214c      	movs	r1, #76	; 0x4c
 8000ad8:	2005      	movs	r0, #5
 8000ada:	f000 f857 	bl	8000b8c <NRF24_WriteReg>

	 NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate: 250kbp	- New version
 8000ade:	2126      	movs	r1, #38	; 0x26
 8000ae0:	2006      	movs	r0, #6
 8000ae2:	f000 f853 	bl	8000b8c <NRF24_WriteReg>

	 NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);											// Write TX address
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <NRF24_init+0xa4>)
 8000aea:	2010      	movs	r0, #16
 8000aec:	f000 f8a6 	bl	8000c3c <NRF24_Write_Buf>
	 NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);											// Write RX address Pipe 0
 8000af0:	2203      	movs	r2, #3
 8000af2:	490a      	ldr	r1, [pc, #40]	; (8000b1c <NRF24_init+0xa4>)
 8000af4:	200a      	movs	r0, #10
 8000af6:	f000 f8a1 	bl	8000c3c <NRF24_Write_Buf>
	 NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
 8000afa:	2107      	movs	r1, #7
 8000afc:	2011      	movs	r0, #17
 8000afe:	f000 f845 	bl	8000b8c <NRF24_WriteReg>

	 NRF24L01_RX_Mode();
 8000b02:	f000 f911 	bl	8000d28 <NRF24L01_RX_Mode>
	 LED_OFF;
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <NRF24_init+0xa8>)
 8000b0e:	f000 fd19 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	20000004 	.word	0x20000004
 8000b20:	40020800 	.word	0x40020800

08000b24 <NRF24_ReadReg>:

// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 8000b32:	2200      	movs	r2, #0
 8000b34:	2110      	movs	r1, #16
 8000b36:	4813      	ldr	r0, [pc, #76]	; (8000b84 <NRF24_ReadReg+0x60>)
 8000b38:	f000 fd04 	bl	8001544 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 8000b3c:	f107 020f 	add.w	r2, r7, #15
 8000b40:	1df9      	adds	r1, r7, #7
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	480f      	ldr	r0, [pc, #60]	; (8000b88 <NRF24_ReadReg+0x64>)
 8000b4c:	f001 fb8d 	bl	800226a <HAL_SPI_TransmitReceive>

	if (addr != STATUS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b07      	cmp	r3, #7
 8000b54:	d00c      	beq.n	8000b70 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 8000b56:	23ff      	movs	r3, #255	; 0xff
 8000b58:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 8000b5a:	f107 020f 	add.w	r2, r7, #15
 8000b5e:	f107 010e 	add.w	r1, r7, #14
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <NRF24_ReadReg+0x64>)
 8000b6c:	f001 fb7d 	bl	800226a <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8000b70:	2201      	movs	r2, #1
 8000b72:	2110      	movs	r1, #16
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <NRF24_ReadReg+0x60>)
 8000b76:	f000 fce5 	bl	8001544 <HAL_GPIO_WritePin>

	return dt;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40020000 	.word	0x40020000
 8000b88:	200000c0 	.word	0x200000c0

08000b8c <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	460a      	mov	r2, r1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f043 0320 	orr.w	r3, r3, #32
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <NRF24_WriteReg+0x54>)
 8000bac:	f000 fcca 	bl	8001544 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 8000bb0:	1df9      	adds	r1, r7, #7
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <NRF24_WriteReg+0x58>)
 8000bba:	f001 fa1a 	bl	8001ff2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 8000bbe:	1db9      	adds	r1, r7, #6
 8000bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <NRF24_WriteReg+0x58>)
 8000bc8:	f001 fa13 	bl	8001ff2 <HAL_SPI_Transmit>

	CS_OFF;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <NRF24_WriteReg+0x54>)
 8000bd2:	f000 fcb7 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40020000 	.word	0x40020000
 8000be4:	200000c0 	.word	0x200000c0

08000be8 <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 8000bee:	2350      	movs	r3, #80	; 0x50
 8000bf0:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	480f      	ldr	r0, [pc, #60]	; (8000c34 <NRF24_ToggleFeatures+0x4c>)
 8000bf8:	f000 fca4 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000bfc:	1d39      	adds	r1, r7, #4
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	2201      	movs	r2, #1
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <NRF24_ToggleFeatures+0x50>)
 8000c06:	f001 f9f4 	bl	8001ff2 <HAL_SPI_Transmit>

	DelayMicro(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff ff14 	bl	8000a38 <DelayMicro>

	dt[0] = 0x73;
 8000c10:	2373      	movs	r3, #115	; 0x73
 8000c12:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000c14:	1d39      	adds	r1, r7, #4
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4806      	ldr	r0, [pc, #24]	; (8000c38 <NRF24_ToggleFeatures+0x50>)
 8000c1e:	f001 f9e8 	bl	8001ff2 <HAL_SPI_Transmit>
	CS_OFF;
 8000c22:	2201      	movs	r2, #1
 8000c24:	2110      	movs	r1, #16
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <NRF24_ToggleFeatures+0x4c>)
 8000c28:	f000 fc8c 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40020000 	.word	0x40020000
 8000c38:	200000c0 	.word	0x200000c0

08000c3c <NRF24_Write_Buf>:

	CS_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f043 0320 	orr.w	r3, r3, #32
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 8000c56:	2200      	movs	r2, #0
 8000c58:	2110      	movs	r1, #16
 8000c5a:	480f      	ldr	r0, [pc, #60]	; (8000c98 <NRF24_Write_Buf+0x5c>)
 8000c5c:	f000 fc72 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 8000c60:	1df9      	adds	r1, r7, #7
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	2201      	movs	r2, #1
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <NRF24_Write_Buf+0x60>)
 8000c6a:	f001 f9c2 	bl	8001ff2 <HAL_SPI_Transmit>

	DelayMicro(1);
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fee2 	bl	8000a38 <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7c:	6839      	ldr	r1, [r7, #0]
 8000c7e:	4807      	ldr	r0, [pc, #28]	; (8000c9c <NRF24_Write_Buf+0x60>)
 8000c80:	f001 f9b7 	bl	8001ff2 <HAL_SPI_Transmit>

	CS_OFF;
 8000c84:	2201      	movs	r2, #1
 8000c86:	2110      	movs	r1, #16
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <NRF24_Write_Buf+0x5c>)
 8000c8a:	f000 fc5b 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	200000c0 	.word	0x200000c0

08000ca0 <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 8000ca6:	23e2      	movs	r3, #226	; 0xe2
 8000ca8:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8000caa:	2200      	movs	r2, #0
 8000cac:	2110      	movs	r1, #16
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <NRF24_FlushRX+0x3c>)
 8000cb0:	f000 fc48 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000cb4:	1d39      	adds	r1, r7, #4
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <NRF24_FlushRX+0x40>)
 8000cbe:	f001 f998 	bl	8001ff2 <HAL_SPI_Transmit>
	DelayMicro(1);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f7ff feb8 	bl	8000a38 <DelayMicro>
	CS_OFF;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <NRF24_FlushRX+0x3c>)
 8000cce:	f000 fc39 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	200000c0 	.word	0x200000c0

08000ce4 <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 8000cea:	23e1      	movs	r3, #225	; 0xe1
 8000cec:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <NRF24_FlushTX+0x3c>)
 8000cf4:	f000 fc26 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000cf8:	1d39      	adds	r1, r7, #4
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <NRF24_FlushTX+0x40>)
 8000d02:	f001 f976 	bl	8001ff2 <HAL_SPI_Transmit>
	DelayMicro(1);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fe96 	bl	8000a38 <DelayMicro>
	CS_OFF;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2110      	movs	r1, #16
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <NRF24_FlushTX+0x3c>)
 8000d12:	f000 fc17 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020000 	.word	0x40020000
 8000d24:	200000c0 	.word	0x200000c0

08000d28 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fef6 	bl	8000b24 <NRF24_ReadReg>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f043 0303 	orr.w	r3, r3, #3
 8000d42:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4619      	mov	r1, r3
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ff1f 	bl	8000b8c <NRF24_WriteReg>
	CE_SET;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2108      	movs	r1, #8
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <NRF24L01_RX_Mode+0x48>)
 8000d54:	f000 fbf6 	bl	8001544 <HAL_GPIO_WritePin>

	DelayMicro(150);
 8000d58:	2096      	movs	r0, #150	; 0x96
 8000d5a:	f7ff fe6d 	bl	8000a38 <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 8000d5e:	f7ff ff9f 	bl	8000ca0 <NRF24_FlushRX>
	NRF24_FlushTX();
 8000d62:	f7ff ffbf 	bl	8000ce4 <NRF24_FlushTX>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020000 	.word	0x40020000

08000d74 <NRF24L01_TX_Mode>:
	//HAL_GPIO_TogglePin(GPIOC, LED_Pin);
	DelayMicro(1000);
}
// -------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <NRF24L01_TX_Mode+0x2c>)
 8000d80:	2010      	movs	r0, #16
 8000d82:	f7ff ff5b 	bl	8000c3c <NRF24_Write_Buf>
	CE_RESET;
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <NRF24L01_TX_Mode+0x30>)
 8000d8c:	f000 fbda 	bl	8001544 <HAL_GPIO_WritePin>

	// Flush buffers
	NRF24_FlushRX();
 8000d90:	f7ff ff86 	bl	8000ca0 <NRF24_FlushRX>
	NRF24_FlushTX();
 8000d94:	f7ff ffa6 	bl	8000ce4 <NRF24_FlushTX>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000004 	.word	0x20000004
 8000da4:	40020000 	.word	0x40020000

08000da8 <NRF24_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
 8000db4:	4613      	mov	r3, r2
 8000db6:	71bb      	strb	r3, [r7, #6]
	CE_RESET;
 8000db8:	2200      	movs	r2, #0
 8000dba:	2108      	movs	r1, #8
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <NRF24_Transmit+0x64>)
 8000dbe:	f000 fbc1 	bl	8001544 <HAL_GPIO_WritePin>
	CS_ON;
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4811      	ldr	r0, [pc, #68]	; (8000e0c <NRF24_Transmit+0x64>)
 8000dc8:	f000 fbbc 	bl	8001544 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);			// Send address in buss
 8000dcc:	1df9      	adds	r1, r7, #7
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <NRF24_Transmit+0x68>)
 8000dd6:	f001 f90c 	bl	8001ff2 <HAL_SPI_Transmit>
	DelayMicro(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fe2c 	bl	8000a38 <DelayMicro>
	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);		// Send data in buss
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de8:	6839      	ldr	r1, [r7, #0]
 8000dea:	4809      	ldr	r0, [pc, #36]	; (8000e10 <NRF24_Transmit+0x68>)
 8000dec:	f001 f901 	bl	8001ff2 <HAL_SPI_Transmit>

	CS_OFF;
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <NRF24_Transmit+0x64>)
 8000df6:	f000 fba5 	bl	8001544 <HAL_GPIO_WritePin>
	CE_SET;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	4803      	ldr	r0, [pc, #12]	; (8000e0c <NRF24_Transmit+0x64>)
 8000e00:	f000 fba0 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	200000c0 	.word	0x200000c0

08000e14 <NRF24L01_Send>:
// -------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	uint8_t status=0x00, regval=0x00;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	2300      	movs	r3, #0
 8000e22:	73bb      	strb	r3, [r7, #14]

	NRF24L01_TX_Mode(pBuf);															/// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, ЗАБРАТИ БУФЕР З ПАРАМЕТРА ФУНКЦІЇ
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ffa5 	bl	8000d74 <NRF24L01_TX_Mode>

	regval = NRF24_ReadReg(CONFIG);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fe7a 	bl	8000b24 <NRF24_ReadReg>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73bb      	strb	r3, [r7, #14]
	regval |= (1<<PWR_UP);
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	73bb      	strb	r3, [r7, #14]
	regval &= ~(1<<PRIM_RX);							// Turn on TX mode
 8000e3c:	7bbb      	ldrb	r3, [r7, #14]
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	73bb      	strb	r3, [r7, #14]

	NRF24_WriteReg(CONFIG,regval);
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	4619      	mov	r1, r3
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff fe9f 	bl	8000b8c <NRF24_WriteReg>
	DelayMicro(150);
 8000e4e:	2096      	movs	r0, #150	; 0x96
 8000e50:	f7ff fdf2 	bl	8000a38 <DelayMicro>

//	uint8_t dt_reg = NRF24_ReadReg(CONFIG);				// For debug

	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);
 8000e54:	2207      	movs	r2, #7
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	20a0      	movs	r0, #160	; 0xa0
 8000e5a:	f7ff ffa5 	bl	8000da8 <NRF24_Transmit>
	CE_SET;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2108      	movs	r1, #8
 8000e62:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <NRF24L01_Send+0xcc>)
 8000e64:	f000 fb6e 	bl	8001544 <HAL_GPIO_WritePin>
	DelayMicro(15); 			// minimum 10us high pulse (Page 21)
 8000e68:	200f      	movs	r0, #15
 8000e6a:	f7ff fde5 	bl	8000a38 <DelayMicro>
	CE_RESET;
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2108      	movs	r1, #8
 8000e72:	481b      	ldr	r0, [pc, #108]	; (8000ee0 <NRF24L01_Send+0xcc>)
 8000e74:	f000 fb66 	bl	8001544 <HAL_GPIO_WritePin>
	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 8000e78:	bf00      	nop
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <NRF24L01_Send+0xcc>)
 8000e7e:	f000 fb49 	bl	8001514 <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d0f8      	beq.n	8000e7a <NRF24L01_Send+0x66>

	status = NRF24_ReadReg(STATUS);
 8000e88:	2007      	movs	r0, #7
 8000e8a:	f7ff fe4b 	bl	8000b24 <NRF24_ReadReg>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]
	if(status&TX_DS) 			//tx_ds == 0x20   If data was transmitted
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d009      	beq.n	8000eb0 <NRF24L01_Send+0x9c>
	{
	    LED_TGL;							// Blink LED for show that data was transmeeted
 8000e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea0:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <NRF24L01_Send+0xd0>)
 8000ea2:	f000 fb68 	bl	8001576 <HAL_GPIO_TogglePin>
	    NRF24_WriteReg(STATUS, 0x20);
 8000ea6:	2120      	movs	r1, #32
 8000ea8:	2007      	movs	r0, #7
 8000eaa:	f7ff fe6f 	bl	8000b8c <NRF24_WriteReg>
 8000eae:	e00a      	b.n	8000ec6 <NRF24L01_Send+0xb2>
	}
	else if(status&MAX_RT)		// Maximum number of TX retransmits interrupt (lost )
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <NRF24L01_Send+0xb2>
	{
		NRF24_WriteReg(STATUS, 0x10);
 8000eba:	2110      	movs	r1, #16
 8000ebc:	2007      	movs	r0, #7
 8000ebe:	f7ff fe65 	bl	8000b8c <NRF24_WriteReg>
		NRF24_FlushTX();
 8000ec2:	f7ff ff0f 	bl	8000ce4 <NRF24_FlushTX>
	}

	regval = NRF24_ReadReg(OBSERVE_TX);
 8000ec6:	2008      	movs	r0, #8
 8000ec8:	f7ff fe2c 	bl	8000b24 <NRF24_ReadReg>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73bb      	strb	r3, [r7, #14]
	NRF24L01_RX_Mode();
 8000ed0:	f7ff ff2a 	bl	8000d28 <NRF24L01_RX_Mode>

	return regval;
 8000ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <NRF24L01_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24L01_Transmit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <NRF24L01_Transmit+0x68>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
	static uint8_t retr_cnt, dt;
	static uint16_t i=1, retr_cnt_full;
	static uint16_t cnt_lost = 0;


	memcpy(buf1,(uint8_t*)&i,2);
 8000ef0:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <NRF24L01_Transmit+0x6c>)
 8000ef2:	8013      	strh	r3, [r2, #0]
	memcpy(buf1+2,(uint8_t*)&retr_cnt_full,2);
 8000ef4:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <NRF24L01_Transmit+0x70>)
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <NRF24L01_Transmit+0x74>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	8013      	strh	r3, [r2, #0]
	memcpy(buf1+4,(uint8_t*)&cnt_lost,2);
 8000efc:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <NRF24L01_Transmit+0x78>)
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <NRF24L01_Transmit+0x7c>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	8013      	strh	r3, [r2, #0]
//	char test_tx_data[] = "123\n\r";
//
//	dt = NRF24L01_Send(test_tx_data);

	dt = NRF24L01_Send(buf1);
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <NRF24L01_Transmit+0x6c>)
 8000f06:	f7ff ff85 	bl	8000e14 <NRF24L01_Send>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <NRF24L01_Transmit+0x80>)
 8000f10:	701a      	strb	r2, [r3, #0]
	retr_cnt = dt & 0x0F;
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <NRF24L01_Transmit+0x80>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <NRF24L01_Transmit+0x84>)
 8000f1e:	701a      	strb	r2, [r3, #0]

	retr_cnt_full += retr_cnt;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <NRF24L01_Transmit+0x84>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <NRF24L01_Transmit+0x74>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <NRF24L01_Transmit+0x74>)
 8000f30:	801a      	strh	r2, [r3, #0]
	cnt_lost = dt >> 4;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <NRF24L01_Transmit+0x80>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	091b      	lsrs	r3, r3, #4
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <NRF24L01_Transmit+0x7c>)
 8000f3e:	801a      	strh	r2, [r3, #0]

	i++;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <NRF24L01_Transmit+0x68>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <NRF24L01_Transmit+0x68>)
 8000f4a:	801a      	strh	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000098 	.word	0x20000098
 8000f58:	2000009a 	.word	0x2000009a
 8000f5c:	20000168 	.word	0x20000168
 8000f60:	2000009c 	.word	0x2000009c
 8000f64:	2000016a 	.word	0x2000016a
 8000f68:	2000016c 	.word	0x2000016c
 8000f6c:	2000016d 	.word	0x2000016d

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	; (8000fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9a:	f7ff fd3b 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f004 fd8d 	bl	8005abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fa9f 	bl	80004e4 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fb4:	08005dc4 	.word	0x08005dc4
  ldr r2, =_sbss
 8000fb8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fbc:	20004b8c 	.word	0x20004b8c

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f8d8 	bl	80011a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f7ff fc74 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fbfe 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000010 	.word	0x20000010
 800102c:	20000170 	.word	0x20000170

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000170 	.word	0x20000170

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff4c 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ca:	f7ff ff61 	bl	8001090 <__NVIC_GetPriorityGrouping>
 80011ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	6978      	ldr	r0, [r7, #20]
 80011d6:	f7ff ffb1 	bl	800113c <NVIC_EncodePriority>
 80011da:	4602      	mov	r2, r0
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff80 	bl	80010e8 <__NVIC_SetPriority>
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff54 	bl	80010ac <__NVIC_EnableIRQ>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e159      	b.n	80014dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8148 	bne.w	80014d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	2b02      	cmp	r3, #2
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d017      	beq.n	80012fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80a2 	beq.w	80014d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <HAL_GPIO_Init+0x2e8>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a56      	ldr	r2, [pc, #344]	; (80014f4 <HAL_GPIO_Init+0x2e8>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <HAL_GPIO_Init+0x2e8>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ae:	4a52      	ldr	r2, [pc, #328]	; (80014f8 <HAL_GPIO_Init+0x2ec>)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x2f0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x202>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2f4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x1fe>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a47      	ldr	r2, [pc, #284]	; (8001504 <HAL_GPIO_Init+0x2f8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x1fa>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a46      	ldr	r2, [pc, #280]	; (8001508 <HAL_GPIO_Init+0x2fc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x1f6>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a45      	ldr	r2, [pc, #276]	; (800150c <HAL_GPIO_Init+0x300>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x1f2>
 80013fa:	2304      	movs	r3, #4
 80013fc:	e008      	b.n	8001410 <HAL_GPIO_Init+0x204>
 80013fe:	2307      	movs	r3, #7
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x204>
 8001402:	2303      	movs	r3, #3
 8001404:	e004      	b.n	8001410 <HAL_GPIO_Init+0x204>
 8001406:	2302      	movs	r3, #2
 8001408:	e002      	b.n	8001410 <HAL_GPIO_Init+0x204>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x204>
 800140e:	2300      	movs	r3, #0
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f002 0203 	and.w	r2, r2, #3
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	4093      	lsls	r3, r2
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001420:	4935      	ldr	r1, [pc, #212]	; (80014f8 <HAL_GPIO_Init+0x2ec>)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <HAL_GPIO_Init+0x304>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001452:	4a2f      	ldr	r2, [pc, #188]	; (8001510 <HAL_GPIO_Init+0x304>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_GPIO_Init+0x304>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800147c:	4a24      	ldr	r2, [pc, #144]	; (8001510 <HAL_GPIO_Init+0x304>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_GPIO_Init+0x304>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3301      	adds	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	f67f aea2 	bls.w	8001228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40013800 	.word	0x40013800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40013c00 	.word	0x40013c00

08001514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001588:	887a      	ldrh	r2, [r7, #2]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	041a      	lsls	r2, r3, #16
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43d9      	mvns	r1, r3
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	400b      	ands	r3, r1
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f806 	bl	80015dc <HAL_GPIO_EXTI_Callback>
  }
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40013c00 	.word	0x40013c00

080015dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e267      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d075      	beq.n	80016fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001612:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b04      	cmp	r3, #4
 800161c:	d00c      	beq.n	8001638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161e:	4b85      	ldr	r3, [pc, #532]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001626:	2b08      	cmp	r3, #8
 8001628:	d112      	bne.n	8001650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162a:	4b82      	ldr	r3, [pc, #520]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001636:	d10b      	bne.n	8001650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	4b7e      	ldr	r3, [pc, #504]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d05b      	beq.n	80016fc <HAL_RCC_OscConfig+0x108>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d157      	bne.n	80016fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e242      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x74>
 800165a:	4b76      	ldr	r3, [pc, #472]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a75      	ldr	r2, [pc, #468]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e01d      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x98>
 8001672:	4b70      	ldr	r3, [pc, #448]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6f      	ldr	r2, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b6d      	ldr	r3, [pc, #436]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6c      	ldr	r2, [pc, #432]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 800168c:	4b69      	ldr	r3, [pc, #420]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a68      	ldr	r2, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fcc0 	bl	8001030 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fcbc 	bl	8001030 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e207      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0xc0>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fcac 	bl	8001030 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fca8 	bl	8001030 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1f3      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	4b51      	ldr	r3, [pc, #324]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0xe8>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d063      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170a:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800171e:	2b08      	cmp	r3, #8
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	4b44      	ldr	r3, [pc, #272]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x152>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e1c7      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4937      	ldr	r1, [pc, #220]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e03a      	b.n	80017d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001764:	4b34      	ldr	r3, [pc, #208]	; (8001838 <HAL_RCC_OscConfig+0x244>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fc61 	bl	8001030 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff fc5d 	bl	8001030 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1a8      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4925      	ldr	r1, [pc, #148]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_RCC_OscConfig+0x244>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fc40 	bl	8001030 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff fc3c 	bl	8001030 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e187      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d036      	beq.n	800184c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d016      	beq.n	8001814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_RCC_OscConfig+0x248>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fc20 	bl	8001030 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff fc1c 	bl	8001030 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e167      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x200>
 8001812:	e01b      	b.n	800184c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_OscConfig+0x248>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff fc09 	bl	8001030 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	e00e      	b.n	8001840 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff fc05 	bl	8001030 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d907      	bls.n	8001840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e150      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
 8001834:	40023800 	.word	0x40023800
 8001838:	42470000 	.word	0x42470000
 800183c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ea      	bne.n	8001822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8097 	beq.w	8001988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b81      	ldr	r3, [pc, #516]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b7d      	ldr	r3, [pc, #500]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a7c      	ldr	r2, [pc, #496]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b7a      	ldr	r3, [pc, #488]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b77      	ldr	r3, [pc, #476]	; (8001a68 <HAL_RCC_OscConfig+0x474>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b74      	ldr	r3, [pc, #464]	; (8001a68 <HAL_RCC_OscConfig+0x474>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a73      	ldr	r2, [pc, #460]	; (8001a68 <HAL_RCC_OscConfig+0x474>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fbc5 	bl	8001030 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff fbc1 	bl	8001030 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e10c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <HAL_RCC_OscConfig+0x474>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x2ea>
 80018d0:	4b64      	ldr	r3, [pc, #400]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a63      	ldr	r2, [pc, #396]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x324>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x30c>
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	4a5e      	ldr	r2, [pc, #376]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6713      	str	r3, [r2, #112]	; 0x70
 80018f2:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	4a5b      	ldr	r2, [pc, #364]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6713      	str	r3, [r2, #112]	; 0x70
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x324>
 8001900:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a57      	ldr	r2, [pc, #348]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a54      	ldr	r2, [pc, #336]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff fb86 	bl	8001030 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff fb82 	bl	8001030 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0cb      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0ee      	beq.n	8001928 <HAL_RCC_OscConfig+0x334>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff fb70 	bl	8001030 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff fb6c 	bl	8001030 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0b5      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ee      	bne.n	8001954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	4a38      	ldr	r2, [pc, #224]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a1 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d05c      	beq.n	8001a58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d141      	bne.n	8001a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_RCC_OscConfig+0x478>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb40 	bl	8001030 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fb3c 	bl	8001030 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e087      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	491b      	ldr	r1, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x478>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fb15 	bl	8001030 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff fb11 	bl	8001030 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e05c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x416>
 8001a28:	e054      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_RCC_OscConfig+0x478>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fafe 	bl	8001030 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff fafa 	bl	8001030 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e045      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x444>
 8001a56:	e03d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e038      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x4ec>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d028      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d121      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d11a      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0cc      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d90c      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0b8      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	494d      	ldr	r1, [pc, #308]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d044      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d119      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e07f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e06f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e067      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4934      	ldr	r1, [pc, #208]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7ff fa2c 	bl	8001030 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7ff fa28 	bl	8001030 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e04f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d20c      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e032      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4916      	ldr	r1, [pc, #88]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c6a:	f000 f821 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fe28 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	08005d3c 	.word	0x08005d3c
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	b090      	sub	sp, #64	; 0x40
 8001cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc8:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	f200 80a1 	bhi.w	8001e1c <HAL_RCC_GetSysClockFreq+0x16c>
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce2:	e09b      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ce8:	e09b      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cea:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cee:	e098      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfa:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d028      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	623b      	str	r3, [r7, #32]
 8001d10:	627a      	str	r2, [r7, #36]	; 0x24
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d1c:	fb03 f201 	mul.w	r2, r3, r1
 8001d20:	2300      	movs	r3, #0
 8001d22:	fb00 f303 	mul.w	r3, r0, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d2a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d30:	460a      	mov	r2, r1
 8001d32:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d36:	4413      	add	r3, r2
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	61fa      	str	r2, [r7, #28]
 8001d42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d4a:	f7fe fa49 	bl	80001e0 <__aeabi_uldivmod>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4613      	mov	r3, r2
 8001d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d56:	e053      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	2200      	movs	r2, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	617a      	str	r2, [r7, #20]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d6a:	f04f 0b00 	mov.w	fp, #0
 8001d6e:	4652      	mov	r2, sl
 8001d70:	465b      	mov	r3, fp
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	0159      	lsls	r1, r3, #5
 8001d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d80:	0150      	lsls	r0, r2, #5
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ebb2 080a 	subs.w	r8, r2, sl
 8001d8a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001da2:	ebb2 0408 	subs.w	r4, r2, r8
 8001da6:	eb63 0509 	sbc.w	r5, r3, r9
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	00eb      	lsls	r3, r5, #3
 8001db4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db8:	00e2      	lsls	r2, r4, #3
 8001dba:	4614      	mov	r4, r2
 8001dbc:	461d      	mov	r5, r3
 8001dbe:	eb14 030a 	adds.w	r3, r4, sl
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	eb45 030b 	adc.w	r3, r5, fp
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	028b      	lsls	r3, r1, #10
 8001dda:	4621      	mov	r1, r4
 8001ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001de0:	4621      	mov	r1, r4
 8001de2:	028a      	lsls	r2, r1, #10
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dea:	2200      	movs	r2, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	60fa      	str	r2, [r7, #12]
 8001df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001df4:	f7fe f9f4 	bl	80001e0 <__aeabi_uldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e1a:	e002      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3740      	adds	r7, #64	; 0x40
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	00f42400 	.word	0x00f42400
 8001e38:	017d7840 	.word	0x017d7840

08001e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000000 	.word	0x20000000

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff fff0 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0b5b      	lsrs	r3, r3, #13
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08005d4c 	.word	0x08005d4c

08001e7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	220f      	movs	r2, #15
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RCC_GetClockConfig+0x60>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0207 	and.w	r2, r3, #7
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e07b      	b.n	8001fea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f02:	d009      	beq.n	8001f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
 8001f0a:	e005      	b.n	8001f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fc8c 	bl	8000850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	ea42 0103 	orr.w	r1, r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	f003 0104 	and.w	r1, r3, #4
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	f003 0210 	and.w	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b088      	sub	sp, #32
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_SPI_Transmit+0x22>
 8002010:	2302      	movs	r3, #2
 8002012:	e126      	b.n	8002262 <HAL_SPI_Transmit+0x270>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800201c:	f7ff f808 	bl	8001030 <HAL_GetTick>
 8002020:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d002      	beq.n	8002038 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002036:	e10b      	b.n	8002250 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_SPI_Transmit+0x52>
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002048:	e102      	b.n	8002250 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2203      	movs	r2, #3
 800204e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002090:	d10f      	bne.n	80020b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	d007      	beq.n	80020d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020d8:	d14b      	bne.n	8002172 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_SPI_Transmit+0xf6>
 80020e2:	8afb      	ldrh	r3, [r7, #22]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d13e      	bne.n	8002166 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	881a      	ldrh	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	1c9a      	adds	r2, r3, #2
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800210c:	e02b      	b.n	8002166 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d112      	bne.n	8002142 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	881a      	ldrh	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	1c9a      	adds	r2, r3, #2
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002140:	e011      	b.n	8002166 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002142:	f7fe ff75 	bl	8001030 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d803      	bhi.n	800215a <HAL_SPI_Transmit+0x168>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002158:	d102      	bne.n	8002160 <HAL_SPI_Transmit+0x16e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002164:	e074      	b.n	8002250 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ce      	bne.n	800210e <HAL_SPI_Transmit+0x11c>
 8002170:	e04c      	b.n	800220c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_SPI_Transmit+0x18e>
 800217a:	8afb      	ldrh	r3, [r7, #22]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d140      	bne.n	8002202 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	330c      	adds	r3, #12
 800218a:	7812      	ldrb	r2, [r2, #0]
 800218c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021a6:	e02c      	b.n	8002202 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d113      	bne.n	80021de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	86da      	strh	r2, [r3, #54]	; 0x36
 80021dc:	e011      	b.n	8002202 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021de:	f7fe ff27 	bl	8001030 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d803      	bhi.n	80021f6 <HAL_SPI_Transmit+0x204>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f4:	d102      	bne.n	80021fc <HAL_SPI_Transmit+0x20a>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002200:	e026      	b.n	8002250 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1cd      	bne.n	80021a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fa55 	bl	80026c0 <SPI_EndRxTxTransaction>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	77fb      	strb	r3, [r7, #31]
 800224c:	e000      	b.n	8002250 <HAL_SPI_Transmit+0x25e>
  }

error:
 800224e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002260:	7ffb      	ldrb	r3, [r7, #31]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b08c      	sub	sp, #48	; 0x30
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002278:	2301      	movs	r3, #1
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x26>
 800228c:	2302      	movs	r3, #2
 800228e:	e18a      	b.n	80025a6 <HAL_SPI_TransmitReceive+0x33c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002298:	f7fe feca 	bl	8001030 <HAL_GetTick>
 800229c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d00f      	beq.n	80022da <HAL_SPI_TransmitReceive+0x70>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022c0:	d107      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x68>
 80022ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d003      	beq.n	80022da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022d2:	2302      	movs	r3, #2
 80022d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022d8:	e15b      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x82>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x82>
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022f2:	e14e      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d003      	beq.n	8002308 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2205      	movs	r2, #5
 8002304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	887a      	ldrh	r2, [r7, #2]
 800231e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	887a      	ldrh	r2, [r7, #2]
 800232a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d007      	beq.n	800235c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002364:	d178      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_SPI_TransmitReceive+0x10a>
 800236e:	8b7b      	ldrh	r3, [r7, #26]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d166      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	1c9a      	adds	r2, r3, #2
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002398:	e053      	b.n	8002442 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d11b      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x176>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_SPI_TransmitReceive+0x176>
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d113      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	1c9a      	adds	r2, r3, #2
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d119      	bne.n	8002422 <HAL_SPI_TransmitReceive+0x1b8>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d014      	beq.n	8002422 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	b292      	uxth	r2, r2
 8002404:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	1c9a      	adds	r2, r3, #2
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800241e:	2301      	movs	r3, #1
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002422:	f7fe fe05 	bl	8001030 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800242e:	429a      	cmp	r2, r3
 8002430:	d807      	bhi.n	8002442 <HAL_SPI_TransmitReceive+0x1d8>
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002438:	d003      	beq.n	8002442 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002440:	e0a7      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1a6      	bne.n	800239a <HAL_SPI_TransmitReceive+0x130>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1a1      	bne.n	800239a <HAL_SPI_TransmitReceive+0x130>
 8002456:	e07c      	b.n	8002552 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_SPI_TransmitReceive+0x1fc>
 8002460:	8b7b      	ldrh	r3, [r7, #26]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d16b      	bne.n	800253e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	330c      	adds	r3, #12
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800248c:	e057      	b.n	800253e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b02      	cmp	r3, #2
 800249a:	d11c      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x26c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d017      	beq.n	80024d6 <HAL_SPI_TransmitReceive+0x26c>
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d114      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330c      	adds	r3, #12
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d119      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x2ae>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d014      	beq.n	8002518 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002514:	2301      	movs	r3, #1
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002518:	f7fe fd8a 	bl	8001030 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002524:	429a      	cmp	r2, r3
 8002526:	d803      	bhi.n	8002530 <HAL_SPI_TransmitReceive+0x2c6>
 8002528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800252e:	d102      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x2cc>
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800253c:	e029      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1a2      	bne.n	800248e <HAL_SPI_TransmitReceive+0x224>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d19d      	bne.n	800248e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f8b2 	bl	80026c0 <SPI_EndRxTxTransaction>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800256e:	e010      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	e000      	b.n	8002592 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002590:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3730      	adds	r7, #48	; 0x30
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025c0:	f7fe fd36 	bl	8001030 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	4413      	add	r3, r2
 80025ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025d0:	f7fe fd2e 	bl	8001030 <HAL_GetTick>
 80025d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	015b      	lsls	r3, r3, #5
 80025dc:	0d1b      	lsrs	r3, r3, #20
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025e6:	e054      	b.n	8002692 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ee:	d050      	beq.n	8002692 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025f0:	f7fe fd1e 	bl	8001030 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d902      	bls.n	8002606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d13d      	bne.n	8002682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261e:	d111      	bne.n	8002644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002628:	d004      	beq.n	8002634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002632:	d107      	bne.n	8002644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264c:	d10f      	bne.n	800266e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e017      	b.n	80026b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3b01      	subs	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	429a      	cmp	r2, r3
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d19b      	bne.n	80025e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000000 	.word	0x20000000

080026c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <SPI_EndRxTxTransaction+0x7c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <SPI_EndRxTxTransaction+0x80>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0d5b      	lsrs	r3, r3, #21
 80026d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ea:	d112      	bne.n	8002712 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff ff5a 	bl	80025b0 <SPI_WaitFlagStateUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0220 	orr.w	r2, r3, #32
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e00f      	b.n	8002732 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3b01      	subs	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d0f2      	beq.n	8002712 <SPI_EndRxTxTransaction+0x52>
 800272c:	e000      	b.n	8002730 <SPI_EndRxTxTransaction+0x70>
        break;
 800272e:	bf00      	nop
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000
 8002740:	165e9f81 	.word	0x165e9f81

08002744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e041      	b.n	80027da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f839 	bl	80027e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3304      	adds	r3, #4
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f000 f9ca 	bl	8002b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d001      	beq.n	8002810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e044      	b.n	800289a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d018      	beq.n	8002864 <HAL_TIM_Base_Start_IT+0x6c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d013      	beq.n	8002864 <HAL_TIM_Base_Start_IT+0x6c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <HAL_TIM_Base_Start_IT+0xb4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00e      	beq.n	8002864 <HAL_TIM_Base_Start_IT+0x6c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d009      	beq.n	8002864 <HAL_TIM_Base_Start_IT+0x6c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_TIM_Base_Start_IT+0x6c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d111      	bne.n	8002888 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b06      	cmp	r3, #6
 8002874:	d010      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002886:	e007      	b.n	8002898 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40010000 	.word	0x40010000
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40000800 	.word	0x40000800
 80028b4:	40000c00 	.word	0x40000c00
 80028b8:	40014000 	.word	0x40014000

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8ee 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8e0 	bl	8002acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f8f1 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8c4 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8b6 	bl	8002acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f8c7 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f89a 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f88c 	bl	8002acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f89d 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f870 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f862 	bl	8002acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f873 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fd fec4 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8e2 	bl	8002c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f838 	bl	8002b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0220 	mvn.w	r2, #32
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8ac 	bl	8002c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a34      	ldr	r2, [pc, #208]	; (8002c00 <TIM_Base_SetConfig+0xe4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00f      	beq.n	8002b54 <TIM_Base_SetConfig+0x38>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3a:	d00b      	beq.n	8002b54 <TIM_Base_SetConfig+0x38>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <TIM_Base_SetConfig+0xe8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d007      	beq.n	8002b54 <TIM_Base_SetConfig+0x38>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <TIM_Base_SetConfig+0xec>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d003      	beq.n	8002b54 <TIM_Base_SetConfig+0x38>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <TIM_Base_SetConfig+0xf0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d108      	bne.n	8002b66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <TIM_Base_SetConfig+0xe4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01b      	beq.n	8002ba6 <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b74:	d017      	beq.n	8002ba6 <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <TIM_Base_SetConfig+0xe8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <TIM_Base_SetConfig+0xec>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00f      	beq.n	8002ba6 <TIM_Base_SetConfig+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <TIM_Base_SetConfig+0xf0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <TIM_Base_SetConfig+0x8a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <TIM_Base_SetConfig+0xf4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <TIM_Base_SetConfig+0x8a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <TIM_Base_SetConfig+0xf8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d003      	beq.n	8002ba6 <TIM_Base_SetConfig+0x8a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <TIM_Base_SetConfig+0xfc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <TIM_Base_SetConfig+0xe4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d103      	bne.n	8002bec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	615a      	str	r2, [r3, #20]
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40010000 	.word	0x40010000
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40014400 	.word	0x40014400
 8002c18:	40014800 	.word	0x40014800

08002c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <__NVIC_SetPriority>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	db0a      	blt.n	8002c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	490c      	ldr	r1, [pc, #48]	; (8002c90 <__NVIC_SetPriority+0x4c>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	0112      	lsls	r2, r2, #4
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	440b      	add	r3, r1
 8002c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c6c:	e00a      	b.n	8002c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4908      	ldr	r1, [pc, #32]	; (8002c94 <__NVIC_SetPriority+0x50>)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	440b      	add	r3, r1
 8002c82:	761a      	strb	r2, [r3, #24]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <SysTick_Handler+0x1c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ca0:	f001 fea2 	bl	80049e8 <xTaskGetSchedulerState>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002caa:	f002 fc8d 	bl	80055c8 <xPortSysTickHandler>
  }
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	e000e010 	.word	0xe000e010

08002cb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	f06f 0004 	mvn.w	r0, #4
 8002cc2:	f7ff ffbf 	bl	8002c44 <__NVIC_SetPriority>
#endif
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cd2:	f3ef 8305 	mrs	r3, IPSR
 8002cd6:	603b      	str	r3, [r7, #0]
  return(result);
 8002cd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002cde:	f06f 0305 	mvn.w	r3, #5
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	e00c      	b.n	8002d00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <osKernelInitialize+0x44>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d105      	bne.n	8002cfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <osKernelInitialize+0x44>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	e002      	b.n	8002d00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d00:	687b      	ldr	r3, [r7, #4]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000174 	.word	0x20000174

08002d14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d1a:	f3ef 8305 	mrs	r3, IPSR
 8002d1e:	603b      	str	r3, [r7, #0]
  return(result);
 8002d20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002d26:	f06f 0305 	mvn.w	r3, #5
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	e010      	b.n	8002d50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <osKernelStart+0x48>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d109      	bne.n	8002d4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d36:	f7ff ffbf 	bl	8002cb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <osKernelStart+0x48>)
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002d40:	f001 f9f6 	bl	8004130 <vTaskStartScheduler>
      stat = osOK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	e002      	b.n	8002d50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000174 	.word	0x20000174

08002d60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d70:	f3ef 8305 	mrs	r3, IPSR
 8002d74:	617b      	str	r3, [r7, #20]
  return(result);
 8002d76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d17e      	bne.n	8002e7a <osThreadNew+0x11a>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d07b      	beq.n	8002e7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002d86:	2318      	movs	r3, #24
 8002d88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d045      	beq.n	8002e26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <osThreadNew+0x48>
        name = attr->name;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <osThreadNew+0x6e>
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b38      	cmp	r3, #56	; 0x38
 8002dc0:	d805      	bhi.n	8002dce <osThreadNew+0x6e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <osThreadNew+0x72>
        return (NULL);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e054      	b.n	8002e7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00e      	beq.n	8002e08 <osThreadNew+0xa8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2bbb      	cmp	r3, #187	; 0xbb
 8002df0:	d90a      	bls.n	8002e08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <osThreadNew+0xa8>
        mem = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	e010      	b.n	8002e2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10c      	bne.n	8002e2a <osThreadNew+0xca>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d108      	bne.n	8002e2a <osThreadNew+0xca>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <osThreadNew+0xca>
          mem = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	e001      	b.n	8002e2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d110      	bne.n	8002e52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e38:	9202      	str	r2, [sp, #8]
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6a3a      	ldr	r2, [r7, #32]
 8002e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 ff86 	bl	8003d58 <xTaskCreateStatic>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e013      	b.n	8002e7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d110      	bne.n	8002e7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 ffd1 	bl	8003e12 <xTaskCreate>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d001      	beq.n	8002e7a <osThreadNew+0x11a>
            hTask = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e7a:	693b      	ldr	r3, [r7, #16]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3728      	adds	r7, #40	; 0x28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e8c:	f3ef 8305 	mrs	r3, IPSR
 8002e90:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <osDelay+0x1c>
    stat = osErrorISR;
 8002e98:	f06f 0305 	mvn.w	r3, #5
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	e007      	b.n	8002eb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f001 f90c 	bl	80040c8 <vTaskDelay>
    }
  }

  return (stat);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b08a      	sub	sp, #40	; 0x28
 8002ebe:	af02      	add	r7, sp, #8
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eca:	f3ef 8305 	mrs	r3, IPSR
 8002ece:	613b      	str	r3, [r7, #16]
  return(result);
 8002ed0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d175      	bne.n	8002fc2 <osSemaphoreNew+0x108>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d072      	beq.n	8002fc2 <osSemaphoreNew+0x108>
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d86e      	bhi.n	8002fc2 <osSemaphoreNew+0x108>
    mem = -1;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ee8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <osSemaphoreNew+0x4c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b4f      	cmp	r3, #79	; 0x4f
 8002efe:	d902      	bls.n	8002f06 <osSemaphoreNew+0x4c>
        mem = 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e00c      	b.n	8002f20 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d108      	bne.n	8002f20 <osSemaphoreNew+0x66>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <osSemaphoreNew+0x66>
          mem = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e001      	b.n	8002f20 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f26:	d04c      	beq.n	8002fc2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d128      	bne.n	8002f80 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10a      	bne.n	8002f4a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	9200      	str	r2, [sp, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2100      	movs	r1, #0
 8002f40:	2001      	movs	r0, #1
 8002f42:	f000 f993 	bl	800326c <xQueueGenericCreateStatic>
 8002f46:	61f8      	str	r0, [r7, #28]
 8002f48:	e005      	b.n	8002f56 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 fa04 	bl	800335c <xQueueGenericCreate>
 8002f54:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d022      	beq.n	8002fa2 <osSemaphoreNew+0xe8>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01f      	beq.n	8002fa2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002f62:	2300      	movs	r3, #0
 8002f64:	2200      	movs	r2, #0
 8002f66:	2100      	movs	r1, #0
 8002f68:	69f8      	ldr	r0, [r7, #28]
 8002f6a:	f000 fabf 	bl	80034ec <xQueueGenericSend>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d016      	beq.n	8002fa2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002f74:	69f8      	ldr	r0, [r7, #28]
 8002f76:	f000 fd33 	bl	80039e0 <vQueueDelete>
            hSemaphore = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e010      	b.n	8002fa2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d108      	bne.n	8002f98 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa41 	bl	8003416 <xQueueCreateCountingSemaphoreStatic>
 8002f94:	61f8      	str	r0, [r7, #28]
 8002f96:	e004      	b.n	8002fa2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa72 	bl	8003484 <xQueueCreateCountingSemaphore>
 8002fa0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00c      	beq.n	8002fc2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e001      	b.n	8002fba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002fba:	6979      	ldr	r1, [r7, #20]
 8002fbc:	69f8      	ldr	r0, [r7, #28]
 8002fbe:	f000 fe43 	bl	8003c48 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002fc2:	69fb      	ldr	r3, [r7, #28]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4a06      	ldr	r2, [pc, #24]	; (8002ffc <vApplicationGetIdleTaskMemory+0x30>)
 8002fe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	601a      	str	r2, [r3, #0]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000178 	.word	0x20000178
 8002ffc:	20000234 	.word	0x20000234

08003000 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a07      	ldr	r2, [pc, #28]	; (800302c <vApplicationGetTimerTaskMemory+0x2c>)
 8003010:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <vApplicationGetTimerTaskMemory+0x30>)
 8003016:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301e:	601a      	str	r2, [r3, #0]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	20000434 	.word	0x20000434
 8003030:	200004f0 	.word	0x200004f0

08003034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f103 0208 	add.w	r2, r3, #8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800304c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f103 0208 	add.w	r2, r3, #8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f103 0208 	add.w	r2, r3, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ec:	d103      	bne.n	80030f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e00c      	b.n	8003110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3308      	adds	r3, #8
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e002      	b.n	8003104 <vListInsert+0x2e>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	d2f6      	bcs.n	80030fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	601a      	str	r2, [r3, #0]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6892      	ldr	r2, [r2, #8]
 800315e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6852      	ldr	r2, [r2, #4]
 8003168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d103      	bne.n	800317c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1e5a      	subs	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031c6:	f002 f96d 	bl	80054a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	68f9      	ldr	r1, [r7, #12]
 80031d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	441a      	add	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	3b01      	subs	r3, #1
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	441a      	add	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	22ff      	movs	r2, #255	; 0xff
 800320a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	22ff      	movs	r2, #255	; 0xff
 8003212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d114      	bne.n	8003246 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01a      	beq.n	800325a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3310      	adds	r3, #16
 8003228:	4618      	mov	r0, r3
 800322a:	f001 fa1b 	bl	8004664 <xTaskRemoveFromEventList>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d012      	beq.n	800325a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <xQueueGenericReset+0xcc>)
 8003236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	e009      	b.n	800325a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3310      	adds	r3, #16
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fef2 	bl	8003034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3324      	adds	r3, #36	; 0x24
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff feed 	bl	8003034 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800325a:	f002 f953 	bl	8005504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800325e:	2301      	movs	r3, #1
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08e      	sub	sp, #56	; 0x38
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <xQueueGenericCreateStatic+0x52>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <xQueueGenericCreateStatic+0x56>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <xQueueGenericCreateStatic+0x58>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	623b      	str	r3, [r7, #32]
}
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <xQueueGenericCreateStatic+0x7e>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <xQueueGenericCreateStatic+0x82>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <xQueueGenericCreateStatic+0x84>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	61fb      	str	r3, [r7, #28]
}
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800330a:	2350      	movs	r3, #80	; 0x50
 800330c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b50      	cmp	r3, #80	; 0x50
 8003312:	d00a      	beq.n	800332a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	61bb      	str	r3, [r7, #24]
}
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800332a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800333e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	4613      	mov	r3, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f83f 	bl	80033d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003354:	4618      	mov	r0, r3
 8003356:	3730      	adds	r7, #48	; 0x30
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	613b      	str	r3, [r7, #16]
}
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3350      	adds	r3, #80	; 0x50
 8003394:	4618      	mov	r0, r3
 8003396:	f002 f9a7 	bl	80056e8 <pvPortMalloc>
 800339a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d011      	beq.n	80033c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3350      	adds	r3, #80	; 0x50
 80033aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033b4:	79fa      	ldrb	r2, [r7, #7]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f805 	bl	80033d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033c6:	69bb      	ldr	r3, [r7, #24]
	}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e002      	b.n	80033f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033fe:	2101      	movs	r1, #1
 8003400:	69b8      	ldr	r0, [r7, #24]
 8003402:	f7ff fecb 	bl	800319c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003416:	b580      	push	{r7, lr}
 8003418:	b08a      	sub	sp, #40	; 0x28
 800341a:	af02      	add	r7, sp, #8
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	61bb      	str	r3, [r7, #24]
}
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	429a      	cmp	r2, r3
 8003444:	d90a      	bls.n	800345c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	617b      	str	r3, [r7, #20]
}
 8003458:	bf00      	nop
 800345a:	e7fe      	b.n	800345a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800345c:	2302      	movs	r3, #2
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	2100      	movs	r1, #0
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff ff00 	bl	800326c <xQueueGenericCreateStatic>
 800346c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800347a:	69fb      	ldr	r3, [r7, #28]
	}
 800347c:	4618      	mov	r0, r3
 800347e:	3720      	adds	r7, #32
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	613b      	str	r3, [r7, #16]
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d90a      	bls.n	80034c8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	60fb      	str	r3, [r7, #12]
}
 80034c4:	bf00      	nop
 80034c6:	e7fe      	b.n	80034c6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80034c8:	2202      	movs	r2, #2
 80034ca:	2100      	movs	r1, #0
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff45 	bl	800335c <xQueueGenericCreate>
 80034d2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80034e0:	697b      	ldr	r3, [r7, #20]
	}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08e      	sub	sp, #56	; 0x38
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xQueueGenericSend+0x32>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d103      	bne.n	800352c <xQueueGenericSend+0x40>
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <xQueueGenericSend+0x44>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <xQueueGenericSend+0x46>
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <xQueueGenericSend+0x60>
	__asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d103      	bne.n	800355a <xQueueGenericSend+0x6e>
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <xQueueGenericSend+0x72>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <xQueueGenericSend+0x74>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <xQueueGenericSend+0x8e>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	623b      	str	r3, [r7, #32]
}
 8003576:	bf00      	nop
 8003578:	e7fe      	b.n	8003578 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800357a:	f001 fa35 	bl	80049e8 <xTaskGetSchedulerState>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <xQueueGenericSend+0x9e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <xQueueGenericSend+0xa2>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <xQueueGenericSend+0xa4>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <xQueueGenericSend+0xbe>
	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	61fb      	str	r3, [r7, #28]
}
 80035a6:	bf00      	nop
 80035a8:	e7fe      	b.n	80035a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035aa:	f001 ff7b 	bl	80054a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <xQueueGenericSend+0xd4>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d129      	bne.n	8003614 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035c6:	f000 fa2e 	bl	8003a26 <prvCopyDataToQueue>
 80035ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d010      	beq.n	80035f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	3324      	adds	r3, #36	; 0x24
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 f843 	bl	8004664 <xTaskRemoveFromEventList>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035e4:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <xQueueGenericSend+0x1f8>)
 80035e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	e00a      	b.n	800360c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035fc:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <xQueueGenericSend+0x1f8>)
 80035fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800360c:	f001 ff7a 	bl	8005504 <vPortExitCritical>
				return pdPASS;
 8003610:	2301      	movs	r3, #1
 8003612:	e063      	b.n	80036dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800361a:	f001 ff73 	bl	8005504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800361e:	2300      	movs	r3, #0
 8003620:	e05c      	b.n	80036dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4618      	mov	r0, r3
 800362e:	f001 f87d 	bl	800472c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003632:	2301      	movs	r3, #1
 8003634:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003636:	f001 ff65 	bl	8005504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800363a:	f000 fde9 	bl	8004210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800363e:	f001 ff31 	bl	80054a4 <vPortEnterCritical>
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003648:	b25b      	sxtb	r3, r3
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800364e:	d103      	bne.n	8003658 <xQueueGenericSend+0x16c>
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800365e:	b25b      	sxtb	r3, r3
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003664:	d103      	bne.n	800366e <xQueueGenericSend+0x182>
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800366e:	f001 ff49 	bl	8005504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003672:	1d3a      	adds	r2, r7, #4
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f001 f86c 	bl	8004758 <xTaskCheckForTimeOut>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d124      	bne.n	80036d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003688:	f000 fac5 	bl	8003c16 <prvIsQueueFull>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d018      	beq.n	80036c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	3310      	adds	r3, #16
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f000 ff92 	bl	80045c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036a2:	f000 fa50 	bl	8003b46 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036a6:	f000 fdc1 	bl	800422c <xTaskResumeAll>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f47f af7c 	bne.w	80035aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80036b2:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <xQueueGenericSend+0x1f8>)
 80036b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	e772      	b.n	80035aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c6:	f000 fa3e 	bl	8003b46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036ca:	f000 fdaf 	bl	800422c <xTaskResumeAll>
 80036ce:	e76c      	b.n	80035aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036d2:	f000 fa38 	bl	8003b46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036d6:	f000 fda9 	bl	800422c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3738      	adds	r7, #56	; 0x38
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b090      	sub	sp, #64	; 0x40
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d103      	bne.n	8003724 <xQueueGenericSendFromISR+0x3c>
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <xQueueGenericSendFromISR+0x40>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <xQueueGenericSendFromISR+0x42>
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003740:	bf00      	nop
 8003742:	e7fe      	b.n	8003742 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d103      	bne.n	8003752 <xQueueGenericSendFromISR+0x6a>
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <xQueueGenericSendFromISR+0x6e>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <xQueueGenericSendFromISR+0x70>
 8003756:	2300      	movs	r3, #0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	623b      	str	r3, [r7, #32]
}
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003772:	f001 ff79 	bl	8005668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003776:	f3ef 8211 	mrs	r2, BASEPRI
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	61fa      	str	r2, [r7, #28]
 800378c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800378e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <xQueueGenericSendFromISR+0xbc>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d12f      	bne.n	8003804 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037ba:	f000 f934 	bl	8003a26 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c6:	d112      	bne.n	80037ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d016      	beq.n	80037fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	3324      	adds	r3, #36	; 0x24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 ff45 	bl	8004664 <xTaskRemoveFromEventList>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e007      	b.n	80037fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037f2:	3301      	adds	r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	b25a      	sxtb	r2, r3
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80037fe:	2301      	movs	r3, #1
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003802:	e001      	b.n	8003808 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003804:	2300      	movs	r3, #0
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003816:	4618      	mov	r0, r3
 8003818:	3740      	adds	r7, #64	; 0x40
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800382c:	2300      	movs	r3, #0
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <xQueueReceive+0x30>
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	623b      	str	r3, [r7, #32]
}
 800384c:	bf00      	nop
 800384e:	e7fe      	b.n	800384e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <xQueueReceive+0x3e>
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <xQueueReceive+0x42>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <xQueueReceive+0x44>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <xQueueReceive+0x5e>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	61fb      	str	r3, [r7, #28]
}
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800387e:	f001 f8b3 	bl	80049e8 <xTaskGetSchedulerState>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <xQueueReceive+0x6e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <xQueueReceive+0x72>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <xQueueReceive+0x74>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xQueueReceive+0x8e>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	61bb      	str	r3, [r7, #24]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038ae:	f001 fdf9 	bl	80054a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01f      	beq.n	80038fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c2:	f000 f91a 	bl	8003afa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	1e5a      	subs	r2, r3, #1
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00f      	beq.n	80038f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	3310      	adds	r3, #16
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fec2 	bl	8004664 <xTaskRemoveFromEventList>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038e6:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <xQueueReceive+0x1bc>)
 80038e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038f6:	f001 fe05 	bl	8005504 <vPortExitCritical>
				return pdPASS;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e069      	b.n	80039d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d103      	bne.n	800390c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003904:	f001 fdfe 	bl	8005504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003908:	2300      	movs	r3, #0
 800390a:	e062      	b.n	80039d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003912:	f107 0310 	add.w	r3, r7, #16
 8003916:	4618      	mov	r0, r3
 8003918:	f000 ff08 	bl	800472c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800391c:	2301      	movs	r3, #1
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003920:	f001 fdf0 	bl	8005504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003924:	f000 fc74 	bl	8004210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003928:	f001 fdbc 	bl	80054a4 <vPortEnterCritical>
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003932:	b25b      	sxtb	r3, r3
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003938:	d103      	bne.n	8003942 <xQueueReceive+0x122>
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003948:	b25b      	sxtb	r3, r3
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394e:	d103      	bne.n	8003958 <xQueueReceive+0x138>
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003958:	f001 fdd4 	bl	8005504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800395c:	1d3a      	adds	r2, r7, #4
 800395e:	f107 0310 	add.w	r3, r7, #16
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fef7 	bl	8004758 <xTaskCheckForTimeOut>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d123      	bne.n	80039b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003972:	f000 f93a 	bl	8003bea <prvIsQueueEmpty>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d017      	beq.n	80039ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	3324      	adds	r3, #36	; 0x24
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fe1d 	bl	80045c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800398a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800398c:	f000 f8db 	bl	8003b46 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003990:	f000 fc4c 	bl	800422c <xTaskResumeAll>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d189      	bne.n	80038ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <xQueueReceive+0x1bc>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	e780      	b.n	80038ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ae:	f000 f8ca 	bl	8003b46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039b2:	f000 fc3b 	bl	800422c <xTaskResumeAll>
 80039b6:	e77a      	b.n	80038ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ba:	f000 f8c4 	bl	8003b46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039be:	f000 fc35 	bl	800422c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c4:	f000 f911 	bl	8003bea <prvIsQueueEmpty>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f43f af6f 	beq.w	80038ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3730      	adds	r7, #48	; 0x30
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <vQueueDelete+0x28>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	60bb      	str	r3, [r7, #8]
}
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f947 	bl	8003c9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f001 ff31 	bl	8005880 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10d      	bne.n	8003a60 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d14d      	bne.n	8003ae8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 ffe7 	bl	8004a24 <xTaskPriorityDisinherit>
 8003a56:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	e043      	b.n	8003ae8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d119      	bne.n	8003a9a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6858      	ldr	r0, [r3, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	f002 f849 	bl	8005b08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d32b      	bcc.n	8003ae8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	e026      	b.n	8003ae8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68d8      	ldr	r0, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	f002 f82f 	bl	8005b08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	425b      	negs	r3, r3
 8003ab4:	441a      	add	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d207      	bcs.n	8003ad6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	425b      	negs	r3, r3
 8003ad0:	441a      	add	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d105      	bne.n	8003ae8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003af0:	697b      	ldr	r3, [r7, #20]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d018      	beq.n	8003b3e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d303      	bcc.n	8003b2e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68d9      	ldr	r1, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	461a      	mov	r2, r3
 8003b38:	6838      	ldr	r0, [r7, #0]
 8003b3a:	f001 ffe5 	bl	8005b08 <memcpy>
	}
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b4e:	f001 fca9 	bl	80054a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b58:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b5a:	e011      	b.n	8003b80 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3324      	adds	r3, #36	; 0x24
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fd7b 	bl	8004664 <xTaskRemoveFromEventList>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b74:	f000 fe52 	bl	800481c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	dce9      	bgt.n	8003b5c <prvUnlockQueue+0x16>
 8003b88:	e000      	b.n	8003b8c <prvUnlockQueue+0x46>
					break;
 8003b8a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003b94:	f001 fcb6 	bl	8005504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b98:	f001 fc84 	bl	80054a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ba2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ba4:	e011      	b.n	8003bca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d012      	beq.n	8003bd4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3310      	adds	r3, #16
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fd56 	bl	8004664 <xTaskRemoveFromEventList>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003bbe:	f000 fe2d 	bl	800481c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bc2:	7bbb      	ldrb	r3, [r7, #14]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	dce9      	bgt.n	8003ba6 <prvUnlockQueue+0x60>
 8003bd2:	e000      	b.n	8003bd6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003bd4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	22ff      	movs	r2, #255	; 0xff
 8003bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003bde:	f001 fc91 	bl	8005504 <vPortExitCritical>
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bf2:	f001 fc57 	bl	80054a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e001      	b.n	8003c08 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c08:	f001 fc7c 	bl	8005504 <vPortExitCritical>

	return xReturn;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c1e:	f001 fc41 	bl	80054a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d102      	bne.n	8003c34 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e001      	b.n	8003c38 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c38:	f001 fc64 	bl	8005504 <vPortExitCritical>

	return xReturn;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e014      	b.n	8003c82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c58:	4a0f      	ldr	r2, [pc, #60]	; (8003c98 <vQueueAddToRegistry+0x50>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c64:	490c      	ldr	r1, [pc, #48]	; (8003c98 <vQueueAddToRegistry+0x50>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <vQueueAddToRegistry+0x50>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c7a:	e006      	b.n	8003c8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b07      	cmp	r3, #7
 8003c86:	d9e7      	bls.n	8003c58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	200008f0 	.word	0x200008f0

08003c9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e016      	b.n	8003cd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003caa:	4a10      	ldr	r2, [pc, #64]	; (8003cec <vQueueUnregisterQueue+0x50>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d10b      	bne.n	8003cd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003cba:	4a0c      	ldr	r2, [pc, #48]	; (8003cec <vQueueUnregisterQueue+0x50>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003cc4:	4a09      	ldr	r2, [pc, #36]	; (8003cec <vQueueUnregisterQueue+0x50>)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	2200      	movs	r2, #0
 8003cce:	605a      	str	r2, [r3, #4]
				break;
 8003cd0:	e006      	b.n	8003ce0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b07      	cmp	r3, #7
 8003cdc:	d9e5      	bls.n	8003caa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	200008f0 	.word	0x200008f0

08003cf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d00:	f001 fbd0 	bl	80054a4 <vPortEnterCritical>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d0a:	b25b      	sxtb	r3, r3
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d10:	d103      	bne.n	8003d1a <vQueueWaitForMessageRestricted+0x2a>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d20:	b25b      	sxtb	r3, r3
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d26:	d103      	bne.n	8003d30 <vQueueWaitForMessageRestricted+0x40>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d30:	f001 fbe8 	bl	8005504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3324      	adds	r3, #36	; 0x24
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fc61 	bl	800460c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d4a:	6978      	ldr	r0, [r7, #20]
 8003d4c:	f7ff fefb 	bl	8003b46 <prvUnlockQueue>
	}
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08e      	sub	sp, #56	; 0x38
 8003d5c:	af04      	add	r7, sp, #16
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	623b      	str	r3, [r7, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <xTaskCreateStatic+0x46>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	61fb      	str	r3, [r7, #28]
}
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d9e:	23bc      	movs	r3, #188	; 0xbc
 8003da0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2bbc      	cmp	r3, #188	; 0xbc
 8003da6:	d00a      	beq.n	8003dbe <xTaskCreateStatic+0x66>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	61bb      	str	r3, [r7, #24]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003dbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01e      	beq.n	8003e04 <xTaskCreateStatic+0xac>
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01b      	beq.n	8003e04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dde:	2300      	movs	r3, #0
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	9302      	str	r3, [sp, #8]
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f850 	bl	8003e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dfe:	f000 f8f3 	bl	8003fe8 <prvAddNewTaskToReadyList>
 8003e02:	e001      	b.n	8003e08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e08:	697b      	ldr	r3, [r7, #20]
	}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3728      	adds	r7, #40	; 0x28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08c      	sub	sp, #48	; 0x30
 8003e16:	af04      	add	r7, sp, #16
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fc5e 	bl	80056e8 <pvPortMalloc>
 8003e2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e34:	20bc      	movs	r0, #188	; 0xbc
 8003e36:	f001 fc57 	bl	80056e8 <pvPortMalloc>
 8003e3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
 8003e48:	e005      	b.n	8003e56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f001 fd18 	bl	8005880 <vPortFree>
 8003e50:	e001      	b.n	8003e56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	2300      	movs	r3, #0
 8003e68:	9303      	str	r3, [sp, #12]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	9302      	str	r3, [sp, #8]
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f80e 	bl	8003e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e80:	69f8      	ldr	r0, [r7, #28]
 8003e82:	f000 f8b1 	bl	8003fe8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e002      	b.n	8003e92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e92:	69bb      	ldr	r3, [r7, #24]
	}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	21a5      	movs	r1, #165	; 0xa5
 8003eb6:	f001 fe35 	bl	8005b24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	617b      	str	r3, [r7, #20]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01f      	beq.n	8003f3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e012      	b.n	8003f26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	7819      	ldrb	r1, [r3, #0]
 8003f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3334      	adds	r3, #52	; 0x34
 8003f10:	460a      	mov	r2, r1
 8003f12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3301      	adds	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b0f      	cmp	r3, #15
 8003f2a:	d9e9      	bls.n	8003f00 <prvInitialiseNewTask+0x64>
 8003f2c:	e000      	b.n	8003f30 <prvInitialiseNewTask+0x94>
			{
				break;
 8003f2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f38:	e003      	b.n	8003f42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	2b37      	cmp	r3, #55	; 0x37
 8003f46:	d901      	bls.n	8003f4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f48:	2337      	movs	r3, #55	; 0x37
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	3304      	adds	r3, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f886 	bl	8003074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	3318      	adds	r3, #24
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff f881 	bl	8003074 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	3354      	adds	r3, #84	; 0x54
 8003f9c:	2260      	movs	r2, #96	; 0x60
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 fdbf 	bl	8005b24 <memset>
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	4a0c      	ldr	r2, [pc, #48]	; (8003fdc <prvInitialiseNewTask+0x140>)
 8003faa:	659a      	str	r2, [r3, #88]	; 0x58
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <prvInitialiseNewTask+0x144>)
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <prvInitialiseNewTask+0x148>)
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	69b8      	ldr	r0, [r7, #24]
 8003fbe:	f001 f941 	bl	8005244 <pxPortInitialiseStack>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	08005d74 	.word	0x08005d74
 8003fe0:	08005d94 	.word	0x08005d94
 8003fe4:	08005d54 	.word	0x08005d54

08003fe8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ff0:	f001 fa58 	bl	80054a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ff4:	4b2d      	ldr	r3, [pc, #180]	; (80040ac <prvAddNewTaskToReadyList+0xc4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <prvAddNewTaskToReadyList+0xc4>)
 8003ffc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ffe:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <prvAddNewTaskToReadyList+0xc8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004006:	4a2a      	ldr	r2, [pc, #168]	; (80040b0 <prvAddNewTaskToReadyList+0xc8>)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <prvAddNewTaskToReadyList+0xc4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d110      	bne.n	8004036 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004014:	f000 fc26 	bl	8004864 <prvInitialiseTaskLists>
 8004018:	e00d      	b.n	8004036 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800401a:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <prvAddNewTaskToReadyList+0xcc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <prvAddNewTaskToReadyList+0xc8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	429a      	cmp	r2, r3
 800402e:	d802      	bhi.n	8004036 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004030:	4a1f      	ldr	r2, [pc, #124]	; (80040b0 <prvAddNewTaskToReadyList+0xc8>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <prvAddNewTaskToReadyList+0xd0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3301      	adds	r3, #1
 800403c:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <prvAddNewTaskToReadyList+0xd0>)
 800403e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <prvAddNewTaskToReadyList+0xd0>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <prvAddNewTaskToReadyList+0xd4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d903      	bls.n	800405c <prvAddNewTaskToReadyList+0x74>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a18      	ldr	r2, [pc, #96]	; (80040bc <prvAddNewTaskToReadyList+0xd4>)
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <prvAddNewTaskToReadyList+0xd8>)
 800406a:	441a      	add	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f7ff f80b 	bl	800308e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004078:	f001 fa44 	bl	8005504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <prvAddNewTaskToReadyList+0xcc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004084:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <prvAddNewTaskToReadyList+0xc8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	429a      	cmp	r2, r3
 8004090:	d207      	bcs.n	80040a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <prvAddNewTaskToReadyList+0xdc>)
 8004094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000e04 	.word	0x20000e04
 80040b0:	20000930 	.word	0x20000930
 80040b4:	20000e10 	.word	0x20000e10
 80040b8:	20000e20 	.word	0x20000e20
 80040bc:	20000e0c 	.word	0x20000e0c
 80040c0:	20000934 	.word	0x20000934
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d017      	beq.n	800410a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040da:	4b13      	ldr	r3, [pc, #76]	; (8004128 <vTaskDelay+0x60>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <vTaskDelay+0x30>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	60bb      	str	r3, [r7, #8]
}
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040f8:	f000 f88a 	bl	8004210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040fc:	2100      	movs	r1, #0
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fcfe 	bl	8004b00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004104:	f000 f892 	bl	800422c <xTaskResumeAll>
 8004108:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <vTaskDelay+0x64>)
 8004112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000e2c 	.word	0x20000e2c
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800413e:	463a      	mov	r2, r7
 8004140:	1d39      	adds	r1, r7, #4
 8004142:	f107 0308 	add.w	r3, r7, #8
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe ff40 	bl	8002fcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800414c:	6839      	ldr	r1, [r7, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	9202      	str	r2, [sp, #8]
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	2300      	movs	r3, #0
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	2300      	movs	r3, #0
 800415c:	460a      	mov	r2, r1
 800415e:	4924      	ldr	r1, [pc, #144]	; (80041f0 <vTaskStartScheduler+0xc0>)
 8004160:	4824      	ldr	r0, [pc, #144]	; (80041f4 <vTaskStartScheduler+0xc4>)
 8004162:	f7ff fdf9 	bl	8003d58 <xTaskCreateStatic>
 8004166:	4603      	mov	r3, r0
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <vTaskStartScheduler+0xc8>)
 800416a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800416c:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <vTaskStartScheduler+0xc8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004174:	2301      	movs	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e001      	b.n	800417e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d102      	bne.n	800418a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004184:	f000 fd10 	bl	8004ba8 <xTimerCreateTimerTask>
 8004188:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d11b      	bne.n	80041c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	613b      	str	r3, [r7, #16]
}
 80041a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041a4:	4b15      	ldr	r3, [pc, #84]	; (80041fc <vTaskStartScheduler+0xcc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3354      	adds	r3, #84	; 0x54
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <vTaskStartScheduler+0xd0>)
 80041ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <vTaskStartScheduler+0xd4>)
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <vTaskStartScheduler+0xd8>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041bc:	4b13      	ldr	r3, [pc, #76]	; (800420c <vTaskStartScheduler+0xdc>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041c2:	f001 f8cd 	bl	8005360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041c6:	e00e      	b.n	80041e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ce:	d10a      	bne.n	80041e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	60fb      	str	r3, [r7, #12]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <vTaskStartScheduler+0xb4>
}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	08005cf0 	.word	0x08005cf0
 80041f4:	08004835 	.word	0x08004835
 80041f8:	20000e28 	.word	0x20000e28
 80041fc:	20000930 	.word	0x20000930
 8004200:	20000018 	.word	0x20000018
 8004204:	20000e24 	.word	0x20000e24
 8004208:	20000e10 	.word	0x20000e10
 800420c:	20000e08 	.word	0x20000e08

08004210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <vTaskSuspendAll+0x18>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	4a03      	ldr	r2, [pc, #12]	; (8004228 <vTaskSuspendAll+0x18>)
 800421c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	20000e2c 	.word	0x20000e2c

0800422c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800423a:	4b42      	ldr	r3, [pc, #264]	; (8004344 <xTaskResumeAll+0x118>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <xTaskResumeAll+0x2c>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	603b      	str	r3, [r7, #0]
}
 8004254:	bf00      	nop
 8004256:	e7fe      	b.n	8004256 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004258:	f001 f924 	bl	80054a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800425c:	4b39      	ldr	r3, [pc, #228]	; (8004344 <xTaskResumeAll+0x118>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3b01      	subs	r3, #1
 8004262:	4a38      	ldr	r2, [pc, #224]	; (8004344 <xTaskResumeAll+0x118>)
 8004264:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004266:	4b37      	ldr	r3, [pc, #220]	; (8004344 <xTaskResumeAll+0x118>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d162      	bne.n	8004334 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <xTaskResumeAll+0x11c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d05e      	beq.n	8004334 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004276:	e02f      	b.n	80042d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004278:	4b34      	ldr	r3, [pc, #208]	; (800434c <xTaskResumeAll+0x120>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3318      	adds	r3, #24
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe ff5f 	bl	8003148 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3304      	adds	r3, #4
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe ff5a 	bl	8003148 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <xTaskResumeAll+0x124>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d903      	bls.n	80042a8 <xTaskResumeAll+0x7c>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <xTaskResumeAll+0x124>)
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4a27      	ldr	r2, [pc, #156]	; (8004354 <xTaskResumeAll+0x128>)
 80042b6:	441a      	add	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7fe fee5 	bl	800308e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	4b23      	ldr	r3, [pc, #140]	; (8004358 <xTaskResumeAll+0x12c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80042d2:	4b22      	ldr	r3, [pc, #136]	; (800435c <xTaskResumeAll+0x130>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042d8:	4b1c      	ldr	r3, [pc, #112]	; (800434c <xTaskResumeAll+0x120>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1cb      	bne.n	8004278 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042e6:	f000 fb5f 	bl	80049a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042ea:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <xTaskResumeAll+0x134>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d010      	beq.n	8004318 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042f6:	f000 f847 	bl	8004388 <xTaskIncrementTick>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004300:	4b16      	ldr	r3, [pc, #88]	; (800435c <xTaskResumeAll+0x130>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3b01      	subs	r3, #1
 800430a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f1      	bne.n	80042f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <xTaskResumeAll+0x134>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <xTaskResumeAll+0x130>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <xTaskResumeAll+0x138>)
 8004326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004334:	f001 f8e6 	bl	8005504 <vPortExitCritical>

	return xAlreadyYielded;
 8004338:	68bb      	ldr	r3, [r7, #8]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000e2c 	.word	0x20000e2c
 8004348:	20000e04 	.word	0x20000e04
 800434c:	20000dc4 	.word	0x20000dc4
 8004350:	20000e0c 	.word	0x20000e0c
 8004354:	20000934 	.word	0x20000934
 8004358:	20000930 	.word	0x20000930
 800435c:	20000e18 	.word	0x20000e18
 8004360:	20000e14 	.word	0x20000e14
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <xTaskGetTickCount+0x1c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004374:	687b      	ldr	r3, [r7, #4]
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000e08 	.word	0x20000e08

08004388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004392:	4b4f      	ldr	r3, [pc, #316]	; (80044d0 <xTaskIncrementTick+0x148>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 808f 	bne.w	80044ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800439c:	4b4d      	ldr	r3, [pc, #308]	; (80044d4 <xTaskIncrementTick+0x14c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043a4:	4a4b      	ldr	r2, [pc, #300]	; (80044d4 <xTaskIncrementTick+0x14c>)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d120      	bne.n	80043f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043b0:	4b49      	ldr	r3, [pc, #292]	; (80044d8 <xTaskIncrementTick+0x150>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	603b      	str	r3, [r7, #0]
}
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <xTaskIncrementTick+0x46>
 80043d0:	4b41      	ldr	r3, [pc, #260]	; (80044d8 <xTaskIncrementTick+0x150>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b41      	ldr	r3, [pc, #260]	; (80044dc <xTaskIncrementTick+0x154>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a3f      	ldr	r2, [pc, #252]	; (80044d8 <xTaskIncrementTick+0x150>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4a3f      	ldr	r2, [pc, #252]	; (80044dc <xTaskIncrementTick+0x154>)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <xTaskIncrementTick+0x158>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a3d      	ldr	r2, [pc, #244]	; (80044e0 <xTaskIncrementTick+0x158>)
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	f000 fadb 	bl	80049a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043f2:	4b3c      	ldr	r3, [pc, #240]	; (80044e4 <xTaskIncrementTick+0x15c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d349      	bcc.n	8004490 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043fc:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <xTaskIncrementTick+0x150>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <xTaskIncrementTick+0x15c>)
 8004408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800440c:	601a      	str	r2, [r3, #0]
					break;
 800440e:	e03f      	b.n	8004490 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004410:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <xTaskIncrementTick+0x150>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	429a      	cmp	r2, r3
 8004426:	d203      	bcs.n	8004430 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004428:	4a2e      	ldr	r2, [pc, #184]	; (80044e4 <xTaskIncrementTick+0x15c>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800442e:	e02f      	b.n	8004490 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe fe87 	bl	8003148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	3318      	adds	r3, #24
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fe7e 	bl	8003148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <xTaskIncrementTick+0x160>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d903      	bls.n	8004460 <xTaskIncrementTick+0xd8>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <xTaskIncrementTick+0x160>)
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <xTaskIncrementTick+0x164>)
 800446e:	441a      	add	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7fe fe09 	bl	800308e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <xTaskIncrementTick+0x168>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	429a      	cmp	r2, r3
 8004488:	d3b8      	bcc.n	80043fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800448e:	e7b5      	b.n	80043fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004490:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <xTaskIncrementTick+0x168>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004496:	4915      	ldr	r1, [pc, #84]	; (80044ec <xTaskIncrementTick+0x164>)
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d901      	bls.n	80044ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <xTaskIncrementTick+0x16c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e004      	b.n	80044c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <xTaskIncrementTick+0x170>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <xTaskIncrementTick+0x170>)
 80044c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80044c4:	697b      	ldr	r3, [r7, #20]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000e2c 	.word	0x20000e2c
 80044d4:	20000e08 	.word	0x20000e08
 80044d8:	20000dbc 	.word	0x20000dbc
 80044dc:	20000dc0 	.word	0x20000dc0
 80044e0:	20000e1c 	.word	0x20000e1c
 80044e4:	20000e24 	.word	0x20000e24
 80044e8:	20000e0c 	.word	0x20000e0c
 80044ec:	20000934 	.word	0x20000934
 80044f0:	20000930 	.word	0x20000930
 80044f4:	20000e18 	.word	0x20000e18
 80044f8:	20000e14 	.word	0x20000e14

080044fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004502:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <vTaskSwitchContext+0xb0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800450a:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <vTaskSwitchContext+0xb4>)
 800450c:	2201      	movs	r2, #1
 800450e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004510:	e046      	b.n	80045a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004512:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <vTaskSwitchContext+0xb4>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004518:	4b26      	ldr	r3, [pc, #152]	; (80045b4 <vTaskSwitchContext+0xb8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e010      	b.n	8004542 <vTaskSwitchContext+0x46>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <vTaskSwitchContext+0x40>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	607b      	str	r3, [r7, #4]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <vTaskSwitchContext+0x3e>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3b01      	subs	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	491d      	ldr	r1, [pc, #116]	; (80045b8 <vTaskSwitchContext+0xbc>)
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0e4      	beq.n	8004520 <vTaskSwitchContext+0x24>
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <vTaskSwitchContext+0xbc>)
 8004562:	4413      	add	r3, r2
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	605a      	str	r2, [r3, #4]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3308      	adds	r3, #8
 8004578:	429a      	cmp	r2, r3
 800457a:	d104      	bne.n	8004586 <vTaskSwitchContext+0x8a>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <vTaskSwitchContext+0xc0>)
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <vTaskSwitchContext+0xb8>)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <vTaskSwitchContext+0xc0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3354      	adds	r3, #84	; 0x54
 800459c:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <vTaskSwitchContext+0xc4>)
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000e2c 	.word	0x20000e2c
 80045b0:	20000e18 	.word	0x20000e18
 80045b4:	20000e0c 	.word	0x20000e0c
 80045b8:	20000934 	.word	0x20000934
 80045bc:	20000930 	.word	0x20000930
 80045c0:	20000018 	.word	0x20000018

080045c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	60fb      	str	r3, [r7, #12]
}
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <vTaskPlaceOnEventList+0x44>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3318      	adds	r3, #24
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fe fd6f 	bl	80030d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045f8:	2101      	movs	r1, #1
 80045fa:	6838      	ldr	r0, [r7, #0]
 80045fc:	f000 fa80 	bl	8004b00 <prvAddCurrentTaskToDelayedList>
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000930 	.word	0x20000930

0800460c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	617b      	str	r3, [r7, #20]
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <vTaskPlaceOnEventListRestricted+0x54>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3318      	adds	r3, #24
 800463a:	4619      	mov	r1, r3
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7fe fd26 	bl	800308e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800464c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	68b8      	ldr	r0, [r7, #8]
 8004652:	f000 fa55 	bl	8004b00 <prvAddCurrentTaskToDelayedList>
	}
 8004656:	bf00      	nop
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000930 	.word	0x20000930

08004664 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	60fb      	str	r3, [r7, #12]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	3318      	adds	r3, #24
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe fd57 	bl	8003148 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800469a:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <xTaskRemoveFromEventList+0xb0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11d      	bne.n	80046de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe fd4e 	bl	8003148 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4b19      	ldr	r3, [pc, #100]	; (8004718 <xTaskRemoveFromEventList+0xb4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d903      	bls.n	80046c0 <xTaskRemoveFromEventList+0x5c>
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <xTaskRemoveFromEventList+0xb4>)
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4a13      	ldr	r2, [pc, #76]	; (800471c <xTaskRemoveFromEventList+0xb8>)
 80046ce:	441a      	add	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f7fe fcd9 	bl	800308e <vListInsertEnd>
 80046dc:	e005      	b.n	80046ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3318      	adds	r3, #24
 80046e2:	4619      	mov	r1, r3
 80046e4:	480e      	ldr	r0, [pc, #56]	; (8004720 <xTaskRemoveFromEventList+0xbc>)
 80046e6:	f7fe fcd2 	bl	800308e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ee:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <xTaskRemoveFromEventList+0xc0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d905      	bls.n	8004704 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046f8:	2301      	movs	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <xTaskRemoveFromEventList+0xc4>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e001      	b.n	8004708 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004708:	697b      	ldr	r3, [r7, #20]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000e2c 	.word	0x20000e2c
 8004718:	20000e0c 	.word	0x20000e0c
 800471c:	20000934 	.word	0x20000934
 8004720:	20000dc4 	.word	0x20000dc4
 8004724:	20000930 	.word	0x20000930
 8004728:	20000e18 	.word	0x20000e18

0800472c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <vTaskInternalSetTimeOutState+0x24>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <vTaskInternalSetTimeOutState+0x28>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	605a      	str	r2, [r3, #4]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	20000e1c 	.word	0x20000e1c
 8004754:	20000e08 	.word	0x20000e08

08004758 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	613b      	str	r3, [r7, #16]
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	60fb      	str	r3, [r7, #12]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800479a:	f000 fe83 	bl	80054a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <xTaskCheckForTimeOut+0xbc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b6:	d102      	bne.n	80047be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	e023      	b.n	8004806 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <xTaskCheckForTimeOut+0xc0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d007      	beq.n	80047da <xTaskCheckForTimeOut+0x82>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e015      	b.n	8004806 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d20b      	bcs.n	80047fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1ad2      	subs	r2, r2, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ff9b 	bl	800472c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	e004      	b.n	8004806 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004802:	2301      	movs	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004806:	f000 fe7d 	bl	8005504 <vPortExitCritical>

	return xReturn;
 800480a:	69fb      	ldr	r3, [r7, #28]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3720      	adds	r7, #32
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000e08 	.word	0x20000e08
 8004818:	20000e1c 	.word	0x20000e1c

0800481c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <vTaskMissedYield+0x14>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]
}
 8004826:	bf00      	nop
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	20000e18 	.word	0x20000e18

08004834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800483c:	f000 f852 	bl	80048e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <prvIdleTask+0x28>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d9f9      	bls.n	800483c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <prvIdleTask+0x2c>)
 800484a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004858:	e7f0      	b.n	800483c <prvIdleTask+0x8>
 800485a:	bf00      	nop
 800485c:	20000934 	.word	0x20000934
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	e00c      	b.n	800488a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4a12      	ldr	r2, [pc, #72]	; (80048c4 <prvInitialiseTaskLists+0x60>)
 800487c:	4413      	add	r3, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fbd8 	bl	8003034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3301      	adds	r3, #1
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b37      	cmp	r3, #55	; 0x37
 800488e:	d9ef      	bls.n	8004870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004890:	480d      	ldr	r0, [pc, #52]	; (80048c8 <prvInitialiseTaskLists+0x64>)
 8004892:	f7fe fbcf 	bl	8003034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004896:	480d      	ldr	r0, [pc, #52]	; (80048cc <prvInitialiseTaskLists+0x68>)
 8004898:	f7fe fbcc 	bl	8003034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800489c:	480c      	ldr	r0, [pc, #48]	; (80048d0 <prvInitialiseTaskLists+0x6c>)
 800489e:	f7fe fbc9 	bl	8003034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048a2:	480c      	ldr	r0, [pc, #48]	; (80048d4 <prvInitialiseTaskLists+0x70>)
 80048a4:	f7fe fbc6 	bl	8003034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048a8:	480b      	ldr	r0, [pc, #44]	; (80048d8 <prvInitialiseTaskLists+0x74>)
 80048aa:	f7fe fbc3 	bl	8003034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <prvInitialiseTaskLists+0x78>)
 80048b0:	4a05      	ldr	r2, [pc, #20]	; (80048c8 <prvInitialiseTaskLists+0x64>)
 80048b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <prvInitialiseTaskLists+0x7c>)
 80048b6:	4a05      	ldr	r2, [pc, #20]	; (80048cc <prvInitialiseTaskLists+0x68>)
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000934 	.word	0x20000934
 80048c8:	20000d94 	.word	0x20000d94
 80048cc:	20000da8 	.word	0x20000da8
 80048d0:	20000dc4 	.word	0x20000dc4
 80048d4:	20000dd8 	.word	0x20000dd8
 80048d8:	20000df0 	.word	0x20000df0
 80048dc:	20000dbc 	.word	0x20000dbc
 80048e0:	20000dc0 	.word	0x20000dc0

080048e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048ea:	e019      	b.n	8004920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048ec:	f000 fdda 	bl	80054a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <prvCheckTasksWaitingTermination+0x50>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe fc23 	bl	8003148 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004902:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <prvCheckTasksWaitingTermination+0x54>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3b01      	subs	r3, #1
 8004908:	4a0b      	ldr	r2, [pc, #44]	; (8004938 <prvCheckTasksWaitingTermination+0x54>)
 800490a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <prvCheckTasksWaitingTermination+0x58>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3b01      	subs	r3, #1
 8004912:	4a0a      	ldr	r2, [pc, #40]	; (800493c <prvCheckTasksWaitingTermination+0x58>)
 8004914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004916:	f000 fdf5 	bl	8005504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f810 	bl	8004940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <prvCheckTasksWaitingTermination+0x58>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e1      	bne.n	80048ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000dd8 	.word	0x20000dd8
 8004938:	20000e04 	.word	0x20000e04
 800493c:	20000dec 	.word	0x20000dec

08004940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3354      	adds	r3, #84	; 0x54
 800494c:	4618      	mov	r0, r3
 800494e:	f001 f8ff 	bl	8005b50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	4618      	mov	r0, r3
 8004962:	f000 ff8d 	bl	8005880 <vPortFree>
				vPortFree( pxTCB );
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 ff8a 	bl	8005880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800496c:	e018      	b.n	80049a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004974:	2b01      	cmp	r3, #1
 8004976:	d103      	bne.n	8004980 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 ff81 	bl	8005880 <vPortFree>
	}
 800497e:	e00f      	b.n	80049a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004986:	2b02      	cmp	r3, #2
 8004988:	d00a      	beq.n	80049a0 <prvDeleteTCB+0x60>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60fb      	str	r3, [r7, #12]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <prvDeleteTCB+0x5e>
	}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <prvResetNextTaskUnblockTime+0x38>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d104      	bne.n	80049c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <prvResetNextTaskUnblockTime+0x3c>)
 80049ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049c0:	e008      	b.n	80049d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <prvResetNextTaskUnblockTime+0x38>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <prvResetNextTaskUnblockTime+0x3c>)
 80049d2:	6013      	str	r3, [r2, #0]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000dbc 	.word	0x20000dbc
 80049e4:	20000e24 	.word	0x20000e24

080049e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <xTaskGetSchedulerState+0x34>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049f6:	2301      	movs	r3, #1
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	e008      	b.n	8004a0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <xTaskGetSchedulerState+0x38>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a04:	2302      	movs	r3, #2
 8004a06:	607b      	str	r3, [r7, #4]
 8004a08:	e001      	b.n	8004a0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a0e:	687b      	ldr	r3, [r7, #4]
	}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	20000e10 	.word	0x20000e10
 8004a20:	20000e2c 	.word	0x20000e2c

08004a24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d056      	beq.n	8004ae8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <xTaskPriorityDisinherit+0xd0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d00a      	beq.n	8004a5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	60fb      	str	r3, [r7, #12]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60bb      	str	r3, [r7, #8]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	1e5a      	subs	r2, r3, #1
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d02c      	beq.n	8004ae8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d128      	bne.n	8004ae8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe fb54 	bl	8003148 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <xTaskPriorityDisinherit+0xd4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d903      	bls.n	8004ac8 <xTaskPriorityDisinherit+0xa4>
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	4a0c      	ldr	r2, [pc, #48]	; (8004af8 <xTaskPriorityDisinherit+0xd4>)
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4a09      	ldr	r2, [pc, #36]	; (8004afc <xTaskPriorityDisinherit+0xd8>)
 8004ad6:	441a      	add	r2, r3
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f7fe fad5 	bl	800308e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ae8:	697b      	ldr	r3, [r7, #20]
	}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000930 	.word	0x20000930
 8004af8:	20000e0c 	.word	0x20000e0c
 8004afc:	20000934 	.word	0x20000934

08004b00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b10:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fb16 	bl	8003148 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b22:	d10a      	bne.n	8004b3a <prvAddCurrentTaskToDelayedList+0x3a>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4619      	mov	r1, r3
 8004b32:	4819      	ldr	r0, [pc, #100]	; (8004b98 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b34:	f7fe faab 	bl	800308e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b38:	e026      	b.n	8004b88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4413      	add	r3, r2
 8004b40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d209      	bcs.n	8004b66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f7fe fab9 	bl	80030d6 <vListInsert>
}
 8004b64:	e010      	b.n	8004b88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f7fe faaf 	bl	80030d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d202      	bcs.n	8004b88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b82:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6013      	str	r3, [r2, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000e08 	.word	0x20000e08
 8004b94:	20000930 	.word	0x20000930
 8004b98:	20000df0 	.word	0x20000df0
 8004b9c:	20000dc0 	.word	0x20000dc0
 8004ba0:	20000dbc 	.word	0x20000dbc
 8004ba4:	20000e24 	.word	0x20000e24

08004ba8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bb2:	f000 fb07 	bl	80051c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bb6:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <xTimerCreateTimerTask+0x80>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d021      	beq.n	8004c02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004bc6:	1d3a      	adds	r2, r7, #4
 8004bc8:	f107 0108 	add.w	r1, r7, #8
 8004bcc:	f107 030c 	add.w	r3, r7, #12
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe fa15 	bl	8003000 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	9202      	str	r2, [sp, #8]
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	2302      	movs	r3, #2
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	460a      	mov	r2, r1
 8004be8:	4910      	ldr	r1, [pc, #64]	; (8004c2c <xTimerCreateTimerTask+0x84>)
 8004bea:	4811      	ldr	r0, [pc, #68]	; (8004c30 <xTimerCreateTimerTask+0x88>)
 8004bec:	f7ff f8b4 	bl	8003d58 <xTaskCreateStatic>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4a10      	ldr	r2, [pc, #64]	; (8004c34 <xTimerCreateTimerTask+0x8c>)
 8004bf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <xTimerCreateTimerTask+0x8c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	613b      	str	r3, [r7, #16]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c1e:	697b      	ldr	r3, [r7, #20]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20000e60 	.word	0x20000e60
 8004c2c:	08005cf8 	.word	0x08005cf8
 8004c30:	08004d6d 	.word	0x08004d6d
 8004c34:	20000e64 	.word	0x20000e64

08004c38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	623b      	str	r3, [r7, #32]
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c66:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <xTimerGenericCommand+0x98>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d02a      	beq.n	8004cc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b05      	cmp	r3, #5
 8004c7e:	dc18      	bgt.n	8004cb2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c80:	f7ff feb2 	bl	80049e8 <xTaskGetSchedulerState>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d109      	bne.n	8004c9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c8a:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <xTimerGenericCommand+0x98>)
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	f107 0110 	add.w	r1, r7, #16
 8004c92:	2300      	movs	r3, #0
 8004c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c96:	f7fe fc29 	bl	80034ec <xQueueGenericSend>
 8004c9a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c9c:	e012      	b.n	8004cc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <xTimerGenericCommand+0x98>)
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	f107 0110 	add.w	r1, r7, #16
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f7fe fc1f 	bl	80034ec <xQueueGenericSend>
 8004cae:	6278      	str	r0, [r7, #36]	; 0x24
 8004cb0:	e008      	b.n	8004cc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <xTimerGenericCommand+0x98>)
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	f107 0110 	add.w	r1, r7, #16
 8004cba:	2300      	movs	r3, #0
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	f7fe fd13 	bl	80036e8 <xQueueGenericSendFromISR>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3728      	adds	r7, #40	; 0x28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000e60 	.word	0x20000e60

08004cd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cde:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <prvProcessExpiredTimer+0x94>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3304      	adds	r3, #4
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe fa2b 	bl	8003148 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d022      	beq.n	8004d46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	699a      	ldr	r2, [r3, #24]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	18d1      	adds	r1, r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	6978      	ldr	r0, [r7, #20]
 8004d0e:	f000 f8d1 	bl	8004eb4 <prvInsertTimerInActiveList>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01f      	beq.n	8004d58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	2100      	movs	r1, #0
 8004d22:	6978      	ldr	r0, [r7, #20]
 8004d24:	f7ff ff88 	bl	8004c38 <xTimerGenericCommand>
 8004d28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d113      	bne.n	8004d58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60fb      	str	r3, [r7, #12]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	6978      	ldr	r0, [r7, #20]
 8004d5e:	4798      	blx	r3
}
 8004d60:	bf00      	nop
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000e58 	.word	0x20000e58

08004d6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d74:	f107 0308 	add.w	r3, r7, #8
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f857 	bl	8004e2c <prvGetNextExpireTime>
 8004d7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4619      	mov	r1, r3
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f803 	bl	8004d90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d8a:	f000 f8d5 	bl	8004f38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d8e:	e7f1      	b.n	8004d74 <prvTimerTask+0x8>

08004d90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d9a:	f7ff fa39 	bl	8004210 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d9e:	f107 0308 	add.w	r3, r7, #8
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f866 	bl	8004e74 <prvSampleTimeNow>
 8004da8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d130      	bne.n	8004e12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <prvProcessTimerOrBlockTask+0x3c>
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d806      	bhi.n	8004dcc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dbe:	f7ff fa35 	bl	800422c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ff85 	bl	8004cd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004dca:	e024      	b.n	8004e16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <prvProcessTimerOrBlockTask+0x90>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <prvProcessTimerOrBlockTask+0x50>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <prvProcessTimerOrBlockTask+0x52>
 8004de0:	2300      	movs	r3, #0
 8004de2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004de4:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <prvProcessTimerOrBlockTask+0x94>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	4619      	mov	r1, r3
 8004df2:	f7fe ff7d 	bl	8003cf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004df6:	f7ff fa19 	bl	800422c <xTaskResumeAll>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <prvProcessTimerOrBlockTask+0x98>)
 8004e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	f3bf 8f6f 	isb	sy
}
 8004e10:	e001      	b.n	8004e16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e12:	f7ff fa0b 	bl	800422c <xTaskResumeAll>
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000e5c 	.word	0x20000e5c
 8004e24:	20000e60 	.word	0x20000e60
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e34:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <prvGetNextExpireTime+0x44>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <prvGetNextExpireTime+0x16>
 8004e3e:	2201      	movs	r2, #1
 8004e40:	e000      	b.n	8004e44 <prvGetNextExpireTime+0x18>
 8004e42:	2200      	movs	r2, #0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d105      	bne.n	8004e5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <prvGetNextExpireTime+0x44>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e001      	b.n	8004e60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e60:	68fb      	ldr	r3, [r7, #12]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000e58 	.word	0x20000e58

08004e74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e7c:	f7ff fa74 	bl	8004368 <xTaskGetTickCount>
 8004e80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <prvSampleTimeNow+0x3c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d205      	bcs.n	8004e98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e8c:	f000 f936 	bl	80050fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e002      	b.n	8004e9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e9e:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <prvSampleTimeNow+0x3c>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000e68 	.word	0x20000e68

08004eb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d812      	bhi.n	8004f00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	1ad2      	subs	r2, r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d302      	bcc.n	8004eee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e01b      	b.n	8004f26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <prvInsertTimerInActiveList+0x7c>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f7fe f8ec 	bl	80030d6 <vListInsert>
 8004efe:	e012      	b.n	8004f26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d206      	bcs.n	8004f16 <prvInsertTimerInActiveList+0x62>
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d302      	bcc.n	8004f16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	e007      	b.n	8004f26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <prvInsertTimerInActiveList+0x80>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f7fe f8d8 	bl	80030d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f26:	697b      	ldr	r3, [r7, #20]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000e5c 	.word	0x20000e5c
 8004f34:	20000e58 	.word	0x20000e58

08004f38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08e      	sub	sp, #56	; 0x38
 8004f3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f3e:	e0ca      	b.n	80050d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da18      	bge.n	8004f78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	3304      	adds	r3, #4
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	61fb      	str	r3, [r7, #28]
}
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f6e:	6850      	ldr	r0, [r2, #4]
 8004f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f72:	6892      	ldr	r2, [r2, #8]
 8004f74:	4611      	mov	r1, r2
 8004f76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f2c0 80aa 	blt.w	80050d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fe f8d9 	bl	8003148 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f96:	463b      	mov	r3, r7
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ff6b 	bl	8004e74 <prvSampleTimeNow>
 8004f9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	f200 8097 	bhi.w	80050d6 <prvProcessReceivedCommands+0x19e>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <prvProcessReceivedCommands+0x78>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fd9 	.word	0x08004fd9
 8004fbc:	0800504d 	.word	0x0800504d
 8004fc0:	08005061 	.word	0x08005061
 8004fc4:	080050ab 	.word	0x080050ab
 8004fc8:	08004fd9 	.word	0x08004fd9
 8004fcc:	08004fd9 	.word	0x08004fd9
 8004fd0:	0800504d 	.word	0x0800504d
 8004fd4:	08005061 	.word	0x08005061
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	18d1      	adds	r1, r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff8:	f7ff ff5c 	bl	8004eb4 <prvInsertTimerInActiveList>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d069      	beq.n	80050d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005008:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d05e      	beq.n	80050d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	441a      	add	r2, r3
 8005020:	2300      	movs	r3, #0
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	2100      	movs	r1, #0
 8005028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502a:	f7ff fe05 	bl	8004c38 <xTimerGenericCommand>
 800502e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d14f      	bne.n	80050d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61bb      	str	r3, [r7, #24]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800505e:	e03a      	b.n	80050d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	617b      	str	r3, [r7, #20]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	18d1      	adds	r1, r2, r3
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050a4:	f7ff ff06 	bl	8004eb4 <prvInsertTimerInActiveList>
					break;
 80050a8:	e015      	b.n	80050d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80050b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ba:	f000 fbe1 	bl	8005880 <vPortFree>
 80050be:	e00a      	b.n	80050d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050d2:	e000      	b.n	80050d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80050d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <prvProcessReceivedCommands+0x1c0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	1d39      	adds	r1, r7, #4
 80050dc:	2200      	movs	r2, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe fb9e 	bl	8003820 <xQueueReceive>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f47f af2a 	bne.w	8004f40 <prvProcessReceivedCommands+0x8>
	}
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	3730      	adds	r7, #48	; 0x30
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000e60 	.word	0x20000e60

080050fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005102:	e048      	b.n	8005196 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <prvSwitchTimerLists+0xc0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510e:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <prvSwitchTimerLists+0xc0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3304      	adds	r3, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe f813 	bl	8003148 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d02e      	beq.n	8005196 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4413      	add	r3, r2
 8005140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	429a      	cmp	r2, r3
 8005148:	d90e      	bls.n	8005168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005156:	4b19      	ldr	r3, [pc, #100]	; (80051bc <prvSwitchTimerLists+0xc0>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7fd ffb8 	bl	80030d6 <vListInsert>
 8005166:	e016      	b.n	8005196 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005168:	2300      	movs	r3, #0
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	2100      	movs	r1, #0
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff fd60 	bl	8004c38 <xTimerGenericCommand>
 8005178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	603b      	str	r3, [r7, #0]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <prvSwitchTimerLists+0xc0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1b1      	bne.n	8005104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <prvSwitchTimerLists+0xc0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051a6:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <prvSwitchTimerLists+0xc4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a04      	ldr	r2, [pc, #16]	; (80051bc <prvSwitchTimerLists+0xc0>)
 80051ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <prvSwitchTimerLists+0xc4>)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	6013      	str	r3, [r2, #0]
}
 80051b4:	bf00      	nop
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000e58 	.word	0x20000e58
 80051c0:	20000e5c 	.word	0x20000e5c

080051c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051ca:	f000 f96b 	bl	80054a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <prvCheckForValidListAndQueue+0x60>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d120      	bne.n	8005218 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80051d6:	4814      	ldr	r0, [pc, #80]	; (8005228 <prvCheckForValidListAndQueue+0x64>)
 80051d8:	f7fd ff2c 	bl	8003034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051dc:	4813      	ldr	r0, [pc, #76]	; (800522c <prvCheckForValidListAndQueue+0x68>)
 80051de:	f7fd ff29 	bl	8003034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <prvCheckForValidListAndQueue+0x6c>)
 80051e4:	4a10      	ldr	r2, [pc, #64]	; (8005228 <prvCheckForValidListAndQueue+0x64>)
 80051e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051e8:	4b12      	ldr	r3, [pc, #72]	; (8005234 <prvCheckForValidListAndQueue+0x70>)
 80051ea:	4a10      	ldr	r2, [pc, #64]	; (800522c <prvCheckForValidListAndQueue+0x68>)
 80051ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051ee:	2300      	movs	r3, #0
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	4b11      	ldr	r3, [pc, #68]	; (8005238 <prvCheckForValidListAndQueue+0x74>)
 80051f4:	4a11      	ldr	r2, [pc, #68]	; (800523c <prvCheckForValidListAndQueue+0x78>)
 80051f6:	2110      	movs	r1, #16
 80051f8:	200a      	movs	r0, #10
 80051fa:	f7fe f837 	bl	800326c <xQueueGenericCreateStatic>
 80051fe:	4603      	mov	r3, r0
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <prvCheckForValidListAndQueue+0x60>)
 8005202:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <prvCheckForValidListAndQueue+0x60>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <prvCheckForValidListAndQueue+0x60>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	490b      	ldr	r1, [pc, #44]	; (8005240 <prvCheckForValidListAndQueue+0x7c>)
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe fd18 	bl	8003c48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005218:	f000 f974 	bl	8005504 <vPortExitCritical>
}
 800521c:	bf00      	nop
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000e60 	.word	0x20000e60
 8005228:	20000e30 	.word	0x20000e30
 800522c:	20000e44 	.word	0x20000e44
 8005230:	20000e58 	.word	0x20000e58
 8005234:	20000e5c 	.word	0x20000e5c
 8005238:	20000f0c 	.word	0x20000f0c
 800523c:	20000e6c 	.word	0x20000e6c
 8005240:	08005d00 	.word	0x08005d00

08005244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3b04      	subs	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800525c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3b04      	subs	r3, #4
 8005262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3b04      	subs	r3, #4
 8005272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005274:	4a0c      	ldr	r2, [pc, #48]	; (80052a8 <pxPortInitialiseStack+0x64>)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3b14      	subs	r3, #20
 800527e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3b04      	subs	r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f06f 0202 	mvn.w	r2, #2
 8005292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3b20      	subs	r3, #32
 8005298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800529a:	68fb      	ldr	r3, [r7, #12]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	080052ad 	.word	0x080052ad

080052ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <prvTaskExitError+0x54>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052be:	d00a      	beq.n	80052d6 <prvTaskExitError+0x2a>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	60fb      	str	r3, [r7, #12]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <prvTaskExitError+0x28>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60bb      	str	r3, [r7, #8]
}
 80052e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052ea:	bf00      	nop
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0fc      	beq.n	80052ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000014 	.word	0x20000014
	...

08005310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <pxCurrentTCBConst2>)
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	6808      	ldr	r0, [r1, #0]
 8005316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531a:	f380 8809 	msr	PSP, r0
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	f380 8811 	msr	BASEPRI, r0
 800532a:	4770      	bx	lr
 800532c:	f3af 8000 	nop.w

08005330 <pxCurrentTCBConst2>:
 8005330:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop

08005338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005338:	4808      	ldr	r0, [pc, #32]	; (800535c <prvPortStartFirstTask+0x24>)
 800533a:	6800      	ldr	r0, [r0, #0]
 800533c:	6800      	ldr	r0, [r0, #0]
 800533e:	f380 8808 	msr	MSP, r0
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f380 8814 	msr	CONTROL, r0
 800534a:	b662      	cpsie	i
 800534c:	b661      	cpsie	f
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	df00      	svc	0
 8005358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800535a:	bf00      	nop
 800535c:	e000ed08 	.word	0xe000ed08

08005360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005366:	4b46      	ldr	r3, [pc, #280]	; (8005480 <xPortStartScheduler+0x120>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a46      	ldr	r2, [pc, #280]	; (8005484 <xPortStartScheduler+0x124>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d10a      	bne.n	8005386 <xPortStartScheduler+0x26>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	613b      	str	r3, [r7, #16]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005386:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <xPortStartScheduler+0x120>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a3f      	ldr	r2, [pc, #252]	; (8005488 <xPortStartScheduler+0x128>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10a      	bne.n	80053a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053a6:	4b39      	ldr	r3, [pc, #228]	; (800548c <xPortStartScheduler+0x12c>)
 80053a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	22ff      	movs	r2, #255	; 0xff
 80053b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	4b31      	ldr	r3, [pc, #196]	; (8005490 <xPortStartScheduler+0x130>)
 80053cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053ce:	4b31      	ldr	r3, [pc, #196]	; (8005494 <xPortStartScheduler+0x134>)
 80053d0:	2207      	movs	r2, #7
 80053d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053d4:	e009      	b.n	80053ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80053d6:	4b2f      	ldr	r3, [pc, #188]	; (8005494 <xPortStartScheduler+0x134>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3b01      	subs	r3, #1
 80053dc:	4a2d      	ldr	r2, [pc, #180]	; (8005494 <xPortStartScheduler+0x134>)
 80053de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d0ef      	beq.n	80053d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053f6:	4b27      	ldr	r3, [pc, #156]	; (8005494 <xPortStartScheduler+0x134>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1c3 0307 	rsb	r3, r3, #7
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d00a      	beq.n	8005418 <xPortStartScheduler+0xb8>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	60bb      	str	r3, [r7, #8]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005418:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <xPortStartScheduler+0x134>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <xPortStartScheduler+0x134>)
 8005420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <xPortStartScheduler+0x134>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800542a:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <xPortStartScheduler+0x134>)
 800542c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005436:	4b18      	ldr	r3, [pc, #96]	; (8005498 <xPortStartScheduler+0x138>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <xPortStartScheduler+0x138>)
 800543c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <xPortStartScheduler+0x138>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a14      	ldr	r2, [pc, #80]	; (8005498 <xPortStartScheduler+0x138>)
 8005448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800544c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800544e:	f000 f8dd 	bl	800560c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005452:	4b12      	ldr	r3, [pc, #72]	; (800549c <xPortStartScheduler+0x13c>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005458:	f000 f8fc 	bl	8005654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800545c:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <xPortStartScheduler+0x140>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0f      	ldr	r2, [pc, #60]	; (80054a0 <xPortStartScheduler+0x140>)
 8005462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005468:	f7ff ff66 	bl	8005338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800546c:	f7ff f846 	bl	80044fc <vTaskSwitchContext>
	prvTaskExitError();
 8005470:	f7ff ff1c 	bl	80052ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	e000ed00 	.word	0xe000ed00
 8005484:	410fc271 	.word	0x410fc271
 8005488:	410fc270 	.word	0x410fc270
 800548c:	e000e400 	.word	0xe000e400
 8005490:	20000f5c 	.word	0x20000f5c
 8005494:	20000f60 	.word	0x20000f60
 8005498:	e000ed20 	.word	0xe000ed20
 800549c:	20000014 	.word	0x20000014
 80054a0:	e000ef34 	.word	0xe000ef34

080054a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	607b      	str	r3, [r7, #4]
}
 80054bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054be:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <vPortEnterCritical+0x58>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <vPortEnterCritical+0x58>)
 80054c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054c8:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <vPortEnterCritical+0x58>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10f      	bne.n	80054f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054d0:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <vPortEnterCritical+0x5c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	603b      	str	r3, [r7, #0]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <vPortEnterCritical+0x4a>
	}
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000014 	.word	0x20000014
 8005500:	e000ed04 	.word	0xe000ed04

08005504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <vPortExitCritical+0x50>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <vPortExitCritical+0x24>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	607b      	str	r3, [r7, #4]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <vPortExitCritical+0x50>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3b01      	subs	r3, #1
 800552e:	4a09      	ldr	r2, [pc, #36]	; (8005554 <vPortExitCritical+0x50>)
 8005530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <vPortExitCritical+0x50>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <vPortExitCritical+0x42>
 800553a:	2300      	movs	r3, #0
 800553c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f383 8811 	msr	BASEPRI, r3
}
 8005544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000014 	.word	0x20000014
	...

08005560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005560:	f3ef 8009 	mrs	r0, PSP
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <pxCurrentTCBConst>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	f01e 0f10 	tst.w	lr, #16
 8005570:	bf08      	it	eq
 8005572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	6010      	str	r0, [r2, #0]
 800557c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005584:	f380 8811 	msr	BASEPRI, r0
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f7fe ffb4 	bl	80044fc <vTaskSwitchContext>
 8005594:	f04f 0000 	mov.w	r0, #0
 8005598:	f380 8811 	msr	BASEPRI, r0
 800559c:	bc09      	pop	{r0, r3}
 800559e:	6819      	ldr	r1, [r3, #0]
 80055a0:	6808      	ldr	r0, [r1, #0]
 80055a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a6:	f01e 0f10 	tst.w	lr, #16
 80055aa:	bf08      	it	eq
 80055ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055b0:	f380 8809 	msr	PSP, r0
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	f3af 8000 	nop.w

080055c0 <pxCurrentTCBConst>:
 80055c0:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop

080055c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	607b      	str	r3, [r7, #4]
}
 80055e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055e2:	f7fe fed1 	bl	8004388 <xTaskIncrementTick>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <xPortSysTickHandler+0x40>)
 80055ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	2300      	movs	r3, #0
 80055f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f383 8811 	msr	BASEPRI, r3
}
 80055fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <vPortSetupTimerInterrupt+0x34>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <vPortSetupTimerInterrupt+0x38>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <vPortSetupTimerInterrupt+0x3c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0a      	ldr	r2, [pc, #40]	; (800564c <vPortSetupTimerInterrupt+0x40>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	099b      	lsrs	r3, r3, #6
 8005628:	4a09      	ldr	r2, [pc, #36]	; (8005650 <vPortSetupTimerInterrupt+0x44>)
 800562a:	3b01      	subs	r3, #1
 800562c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <vPortSetupTimerInterrupt+0x34>)
 8005630:	2207      	movs	r2, #7
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	e000e010 	.word	0xe000e010
 8005644:	e000e018 	.word	0xe000e018
 8005648:	20000000 	.word	0x20000000
 800564c:	10624dd3 	.word	0x10624dd3
 8005650:	e000e014 	.word	0xe000e014

08005654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005664 <vPortEnableVFP+0x10>
 8005658:	6801      	ldr	r1, [r0, #0]
 800565a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800565e:	6001      	str	r1, [r0, #0]
 8005660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005662:	bf00      	nop
 8005664:	e000ed88 	.word	0xe000ed88

08005668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800566e:	f3ef 8305 	mrs	r3, IPSR
 8005672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b0f      	cmp	r3, #15
 8005678:	d914      	bls.n	80056a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <vPortValidateInterruptPriority+0x70>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005684:	4b15      	ldr	r3, [pc, #84]	; (80056dc <vPortValidateInterruptPriority+0x74>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	7afa      	ldrb	r2, [r7, #11]
 800568a:	429a      	cmp	r2, r3
 800568c:	d20a      	bcs.n	80056a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056a4:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <vPortValidateInterruptPriority+0x78>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056ac:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <vPortValidateInterruptPriority+0x7c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d90a      	bls.n	80056ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	603b      	str	r3, [r7, #0]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <vPortValidateInterruptPriority+0x60>
	}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	e000e3f0 	.word	0xe000e3f0
 80056dc:	20000f5c 	.word	0x20000f5c
 80056e0:	e000ed0c 	.word	0xe000ed0c
 80056e4:	20000f60 	.word	0x20000f60

080056e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056f4:	f7fe fd8c 	bl	8004210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056f8:	4b5b      	ldr	r3, [pc, #364]	; (8005868 <pvPortMalloc+0x180>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005700:	f000 f920 	bl	8005944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005704:	4b59      	ldr	r3, [pc, #356]	; (800586c <pvPortMalloc+0x184>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 8093 	bne.w	8005838 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01d      	beq.n	8005754 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005718:	2208      	movs	r2, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	2b00      	cmp	r3, #0
 8005728:	d014      	beq.n	8005754 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f023 0307 	bic.w	r3, r3, #7
 8005730:	3308      	adds	r3, #8
 8005732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <pvPortMalloc+0x6c>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	617b      	str	r3, [r7, #20]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d06e      	beq.n	8005838 <pvPortMalloc+0x150>
 800575a:	4b45      	ldr	r3, [pc, #276]	; (8005870 <pvPortMalloc+0x188>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	d869      	bhi.n	8005838 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005764:	4b43      	ldr	r3, [pc, #268]	; (8005874 <pvPortMalloc+0x18c>)
 8005766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005768:	4b42      	ldr	r3, [pc, #264]	; (8005874 <pvPortMalloc+0x18c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800576e:	e004      	b.n	800577a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d903      	bls.n	800578c <pvPortMalloc+0xa4>
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f1      	bne.n	8005770 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <pvPortMalloc+0x180>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005792:	429a      	cmp	r2, r3
 8005794:	d050      	beq.n	8005838 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2208      	movs	r2, #8
 800579c:	4413      	add	r3, r2
 800579e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	2308      	movs	r3, #8
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d91f      	bls.n	80057f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <pvPortMalloc+0xf8>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	613b      	str	r3, [r7, #16]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	1ad2      	subs	r2, r2, r3
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057f2:	69b8      	ldr	r0, [r7, #24]
 80057f4:	f000 f908 	bl	8005a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057f8:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <pvPortMalloc+0x188>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <pvPortMalloc+0x188>)
 8005804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005806:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <pvPortMalloc+0x188>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <pvPortMalloc+0x190>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d203      	bcs.n	800581a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005812:	4b17      	ldr	r3, [pc, #92]	; (8005870 <pvPortMalloc+0x188>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a18      	ldr	r2, [pc, #96]	; (8005878 <pvPortMalloc+0x190>)
 8005818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <pvPortMalloc+0x184>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	431a      	orrs	r2, r3
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <pvPortMalloc+0x194>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3301      	adds	r3, #1
 8005834:	4a11      	ldr	r2, [pc, #68]	; (800587c <pvPortMalloc+0x194>)
 8005836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005838:	f7fe fcf8 	bl	800422c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <pvPortMalloc+0x174>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	60fb      	str	r3, [r7, #12]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <pvPortMalloc+0x172>
	return pvReturn;
 800585c:	69fb      	ldr	r3, [r7, #28]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3728      	adds	r7, #40	; 0x28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20004b6c 	.word	0x20004b6c
 800586c:	20004b80 	.word	0x20004b80
 8005870:	20004b70 	.word	0x20004b70
 8005874:	20004b64 	.word	0x20004b64
 8005878:	20004b74 	.word	0x20004b74
 800587c:	20004b78 	.word	0x20004b78

08005880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d04d      	beq.n	800592e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005892:	2308      	movs	r3, #8
 8005894:	425b      	negs	r3, r3
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4413      	add	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	4b24      	ldr	r3, [pc, #144]	; (8005938 <vPortFree+0xb8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <vPortFree+0x44>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60fb      	str	r3, [r7, #12]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <vPortFree+0x62>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	60bb      	str	r3, [r7, #8]
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <vPortFree+0xb8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4013      	ands	r3, r2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01e      	beq.n	800592e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11a      	bne.n	800592e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <vPortFree+0xb8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	43db      	mvns	r3, r3
 8005902:	401a      	ands	r2, r3
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005908:	f7fe fc82 	bl	8004210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <vPortFree+0xbc>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4413      	add	r3, r2
 8005916:	4a09      	ldr	r2, [pc, #36]	; (800593c <vPortFree+0xbc>)
 8005918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800591a:	6938      	ldr	r0, [r7, #16]
 800591c:	f000 f874 	bl	8005a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <vPortFree+0xc0>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3301      	adds	r3, #1
 8005926:	4a06      	ldr	r2, [pc, #24]	; (8005940 <vPortFree+0xc0>)
 8005928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800592a:	f7fe fc7f 	bl	800422c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800592e:	bf00      	nop
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20004b80 	.word	0x20004b80
 800593c:	20004b70 	.word	0x20004b70
 8005940:	20004b7c 	.word	0x20004b7c

08005944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800594a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800594e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005950:	4b27      	ldr	r3, [pc, #156]	; (80059f0 <prvHeapInit+0xac>)
 8005952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00c      	beq.n	8005978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3307      	adds	r3, #7
 8005962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0307 	bic.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <prvHeapInit+0xac>)
 8005974:	4413      	add	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <prvHeapInit+0xb0>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005982:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <prvHeapInit+0xb0>)
 8005984:	2200      	movs	r2, #0
 8005986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4413      	add	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005990:	2208      	movs	r2, #8
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0307 	bic.w	r3, r3, #7
 800599e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <prvHeapInit+0xb4>)
 80059a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <prvHeapInit+0xb4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059ae:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <prvHeapInit+0xb4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	1ad2      	subs	r2, r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <prvHeapInit+0xb4>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a0a      	ldr	r2, [pc, #40]	; (80059fc <prvHeapInit+0xb8>)
 80059d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <prvHeapInit+0xbc>)
 80059da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059dc:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <prvHeapInit+0xc0>)
 80059de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059e2:	601a      	str	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	20000f64 	.word	0x20000f64
 80059f4:	20004b64 	.word	0x20004b64
 80059f8:	20004b6c 	.word	0x20004b6c
 80059fc:	20004b74 	.word	0x20004b74
 8005a00:	20004b70 	.word	0x20004b70
 8005a04:	20004b80 	.word	0x20004b80

08005a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a10:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <prvInsertBlockIntoFreeList+0xac>)
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	e002      	b.n	8005a1c <prvInsertBlockIntoFreeList+0x14>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d8f7      	bhi.n	8005a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4413      	add	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d108      	bne.n	8005a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	441a      	add	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	441a      	add	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d118      	bne.n	8005a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d00d      	beq.n	8005a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	441a      	add	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e008      	b.n	8005a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e003      	b.n	8005a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d002      	beq.n	8005aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20004b64 	.word	0x20004b64
 8005ab8:	20004b6c 	.word	0x20004b6c

08005abc <__libc_init_array>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	4d0d      	ldr	r5, [pc, #52]	; (8005af4 <__libc_init_array+0x38>)
 8005ac0:	4c0d      	ldr	r4, [pc, #52]	; (8005af8 <__libc_init_array+0x3c>)
 8005ac2:	1b64      	subs	r4, r4, r5
 8005ac4:	10a4      	asrs	r4, r4, #2
 8005ac6:	2600      	movs	r6, #0
 8005ac8:	42a6      	cmp	r6, r4
 8005aca:	d109      	bne.n	8005ae0 <__libc_init_array+0x24>
 8005acc:	4d0b      	ldr	r5, [pc, #44]	; (8005afc <__libc_init_array+0x40>)
 8005ace:	4c0c      	ldr	r4, [pc, #48]	; (8005b00 <__libc_init_array+0x44>)
 8005ad0:	f000 f8f2 	bl	8005cb8 <_init>
 8005ad4:	1b64      	subs	r4, r4, r5
 8005ad6:	10a4      	asrs	r4, r4, #2
 8005ad8:	2600      	movs	r6, #0
 8005ada:	42a6      	cmp	r6, r4
 8005adc:	d105      	bne.n	8005aea <__libc_init_array+0x2e>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae4:	4798      	blx	r3
 8005ae6:	3601      	adds	r6, #1
 8005ae8:	e7ee      	b.n	8005ac8 <__libc_init_array+0xc>
 8005aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aee:	4798      	blx	r3
 8005af0:	3601      	adds	r6, #1
 8005af2:	e7f2      	b.n	8005ada <__libc_init_array+0x1e>
 8005af4:	08005dbc 	.word	0x08005dbc
 8005af8:	08005dbc 	.word	0x08005dbc
 8005afc:	08005dbc 	.word	0x08005dbc
 8005b00:	08005dc0 	.word	0x08005dc0

08005b04 <__retarget_lock_acquire_recursive>:
 8005b04:	4770      	bx	lr

08005b06 <__retarget_lock_release_recursive>:
 8005b06:	4770      	bx	lr

08005b08 <memcpy>:
 8005b08:	440a      	add	r2, r1
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005b10:	d100      	bne.n	8005b14 <memcpy+0xc>
 8005b12:	4770      	bx	lr
 8005b14:	b510      	push	{r4, lr}
 8005b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b1e:	4291      	cmp	r1, r2
 8005b20:	d1f9      	bne.n	8005b16 <memcpy+0xe>
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <memset>:
 8005b24:	4402      	add	r2, r0
 8005b26:	4603      	mov	r3, r0
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d100      	bne.n	8005b2e <memset+0xa>
 8005b2c:	4770      	bx	lr
 8005b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b32:	e7f9      	b.n	8005b28 <memset+0x4>

08005b34 <cleanup_glue>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	460c      	mov	r4, r1
 8005b38:	6809      	ldr	r1, [r1, #0]
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	b109      	cbz	r1, 8005b42 <cleanup_glue+0xe>
 8005b3e:	f7ff fff9 	bl	8005b34 <cleanup_glue>
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b4a:	f000 b869 	b.w	8005c20 <_free_r>
	...

08005b50 <_reclaim_reent>:
 8005b50:	4b2c      	ldr	r3, [pc, #176]	; (8005c04 <_reclaim_reent+0xb4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4283      	cmp	r3, r0
 8005b56:	b570      	push	{r4, r5, r6, lr}
 8005b58:	4604      	mov	r4, r0
 8005b5a:	d051      	beq.n	8005c00 <_reclaim_reent+0xb0>
 8005b5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b5e:	b143      	cbz	r3, 8005b72 <_reclaim_reent+0x22>
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d14a      	bne.n	8005bfc <_reclaim_reent+0xac>
 8005b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b68:	6819      	ldr	r1, [r3, #0]
 8005b6a:	b111      	cbz	r1, 8005b72 <_reclaim_reent+0x22>
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 f857 	bl	8005c20 <_free_r>
 8005b72:	6961      	ldr	r1, [r4, #20]
 8005b74:	b111      	cbz	r1, 8005b7c <_reclaim_reent+0x2c>
 8005b76:	4620      	mov	r0, r4
 8005b78:	f000 f852 	bl	8005c20 <_free_r>
 8005b7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b7e:	b111      	cbz	r1, 8005b86 <_reclaim_reent+0x36>
 8005b80:	4620      	mov	r0, r4
 8005b82:	f000 f84d 	bl	8005c20 <_free_r>
 8005b86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b88:	b111      	cbz	r1, 8005b90 <_reclaim_reent+0x40>
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f000 f848 	bl	8005c20 <_free_r>
 8005b90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005b92:	b111      	cbz	r1, 8005b9a <_reclaim_reent+0x4a>
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 f843 	bl	8005c20 <_free_r>
 8005b9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005b9c:	b111      	cbz	r1, 8005ba4 <_reclaim_reent+0x54>
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f000 f83e 	bl	8005c20 <_free_r>
 8005ba4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005ba6:	b111      	cbz	r1, 8005bae <_reclaim_reent+0x5e>
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 f839 	bl	8005c20 <_free_r>
 8005bae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005bb0:	b111      	cbz	r1, 8005bb8 <_reclaim_reent+0x68>
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 f834 	bl	8005c20 <_free_r>
 8005bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bba:	b111      	cbz	r1, 8005bc2 <_reclaim_reent+0x72>
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 f82f 	bl	8005c20 <_free_r>
 8005bc2:	69a3      	ldr	r3, [r4, #24]
 8005bc4:	b1e3      	cbz	r3, 8005c00 <_reclaim_reent+0xb0>
 8005bc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bc8:	4620      	mov	r0, r4
 8005bca:	4798      	blx	r3
 8005bcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005bce:	b1b9      	cbz	r1, 8005c00 <_reclaim_reent+0xb0>
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005bd6:	f7ff bfad 	b.w	8005b34 <cleanup_glue>
 8005bda:	5949      	ldr	r1, [r1, r5]
 8005bdc:	b941      	cbnz	r1, 8005bf0 <_reclaim_reent+0xa0>
 8005bde:	3504      	adds	r5, #4
 8005be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005be2:	2d80      	cmp	r5, #128	; 0x80
 8005be4:	68d9      	ldr	r1, [r3, #12]
 8005be6:	d1f8      	bne.n	8005bda <_reclaim_reent+0x8a>
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 f819 	bl	8005c20 <_free_r>
 8005bee:	e7ba      	b.n	8005b66 <_reclaim_reent+0x16>
 8005bf0:	680e      	ldr	r6, [r1, #0]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 f814 	bl	8005c20 <_free_r>
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	e7ef      	b.n	8005bdc <_reclaim_reent+0x8c>
 8005bfc:	2500      	movs	r5, #0
 8005bfe:	e7ef      	b.n	8005be0 <_reclaim_reent+0x90>
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
 8005c02:	bf00      	nop
 8005c04:	20000018 	.word	0x20000018

08005c08 <__malloc_lock>:
 8005c08:	4801      	ldr	r0, [pc, #4]	; (8005c10 <__malloc_lock+0x8>)
 8005c0a:	f7ff bf7b 	b.w	8005b04 <__retarget_lock_acquire_recursive>
 8005c0e:	bf00      	nop
 8005c10:	20004b84 	.word	0x20004b84

08005c14 <__malloc_unlock>:
 8005c14:	4801      	ldr	r0, [pc, #4]	; (8005c1c <__malloc_unlock+0x8>)
 8005c16:	f7ff bf76 	b.w	8005b06 <__retarget_lock_release_recursive>
 8005c1a:	bf00      	nop
 8005c1c:	20004b84 	.word	0x20004b84

08005c20 <_free_r>:
 8005c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d044      	beq.n	8005cb0 <_free_r+0x90>
 8005c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c2a:	9001      	str	r0, [sp, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c32:	bfb8      	it	lt
 8005c34:	18e4      	addlt	r4, r4, r3
 8005c36:	f7ff ffe7 	bl	8005c08 <__malloc_lock>
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <_free_r+0x94>)
 8005c3c:	9801      	ldr	r0, [sp, #4]
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	b933      	cbnz	r3, 8005c50 <_free_r+0x30>
 8005c42:	6063      	str	r3, [r4, #4]
 8005c44:	6014      	str	r4, [r2, #0]
 8005c46:	b003      	add	sp, #12
 8005c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c4c:	f7ff bfe2 	b.w	8005c14 <__malloc_unlock>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d908      	bls.n	8005c66 <_free_r+0x46>
 8005c54:	6825      	ldr	r5, [r4, #0]
 8005c56:	1961      	adds	r1, r4, r5
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf01      	itttt	eq
 8005c5c:	6819      	ldreq	r1, [r3, #0]
 8005c5e:	685b      	ldreq	r3, [r3, #4]
 8005c60:	1949      	addeq	r1, r1, r5
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	e7ed      	b.n	8005c42 <_free_r+0x22>
 8005c66:	461a      	mov	r2, r3
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b10b      	cbz	r3, 8005c70 <_free_r+0x50>
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d9fa      	bls.n	8005c66 <_free_r+0x46>
 8005c70:	6811      	ldr	r1, [r2, #0]
 8005c72:	1855      	adds	r5, r2, r1
 8005c74:	42a5      	cmp	r5, r4
 8005c76:	d10b      	bne.n	8005c90 <_free_r+0x70>
 8005c78:	6824      	ldr	r4, [r4, #0]
 8005c7a:	4421      	add	r1, r4
 8005c7c:	1854      	adds	r4, r2, r1
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	d1e0      	bne.n	8005c46 <_free_r+0x26>
 8005c84:	681c      	ldr	r4, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	6053      	str	r3, [r2, #4]
 8005c8a:	4421      	add	r1, r4
 8005c8c:	6011      	str	r1, [r2, #0]
 8005c8e:	e7da      	b.n	8005c46 <_free_r+0x26>
 8005c90:	d902      	bls.n	8005c98 <_free_r+0x78>
 8005c92:	230c      	movs	r3, #12
 8005c94:	6003      	str	r3, [r0, #0]
 8005c96:	e7d6      	b.n	8005c46 <_free_r+0x26>
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	1961      	adds	r1, r4, r5
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf04      	itt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	6063      	str	r3, [r4, #4]
 8005ca6:	bf04      	itt	eq
 8005ca8:	1949      	addeq	r1, r1, r5
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	6054      	str	r4, [r2, #4]
 8005cae:	e7ca      	b.n	8005c46 <_free_r+0x26>
 8005cb0:	b003      	add	sp, #12
 8005cb2:	bd30      	pop	{r4, r5, pc}
 8005cb4:	20004b88 	.word	0x20004b88

08005cb8 <_init>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	bf00      	nop
 8005cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cbe:	bc08      	pop	{r3}
 8005cc0:	469e      	mov	lr, r3
 8005cc2:	4770      	bx	lr

08005cc4 <_fini>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr
